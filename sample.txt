onst applyDateFilter = (filter) => {
  console.log("filter");

  const now = new Date();
  let dateFilter = {};

  if (filter === "day") {
    dateFilter.createdAt = {
      $gte: new Date(now.setHours(0, 0, 0, 0)),
      $lt: new Date(now.setHours(23, 59, 59, 999)),
    };
  } else if (filter === "week") {
    const startOfWeek = new Date(now);
    const dayOfWeek = now.getDay();
    const distanceToMonday = dayOfWeek === 0 ? 6 : dayOfWeek - 1;

    startOfWeek.setDate(now.getDate() - distanceToMonday);
    startOfWeek.setHours(0, 0, 0, 0);

    // Set end of the week
    const endOfWeek = new Date(startOfWeek);
    endOfWeek.setDate(startOfWeek.getDate() + 6);
    endOfWeek.setHours(23, 59, 59, 999);

    dateFilter.createdAt = { $gte: startOfWeek, $lt: endOfWeek };
  } else if (filter === "month") {
    dateFilter.createdAt = {
      $gte: new Date(now.getFullYear(), now.getMonth(), 1), // Start of month
      $lt: new Date(now.getFullYear(), now.getMonth() + 1, 1), // Start of next month
    };
  } else if (filter === "year") {
    dateFilter.createdAt = {
      $gte: new Date(now.getFullYear(), 0, 1), // Start of year
      $lt: new Date(now.getFullYear(), 12, 31), // End of year
    };
  }

  return dateFilter;
};

//---------------------- admin dashboard ----------------------

export const dashboard = async (req, res) => {
  try {
    
      //----------------------- Daily data---------------------

      const startOfDay = new Date();
      startOfDay.setHours(0, 0, 0, 0);

      const endOfDay = new Date();
      endOfDay.setHours(23, 59, 59, 999);

      const totalCustomers = await User.find();
      const totalUsers = totalCustomers.length;

      const dailyMetrics = await OrderSchema.aggregate([
        {
          // Match orders with specific statuses and not cancelled
          $match: {
            orderStatus: { $in: ["Delivered", "Pending", "Shipped"] },
            isCancelled: false,
            createdAt: { $gte: startOfDay, $lt: endOfDay },
          },
        },
        {
          // Group by year, month, and day to get daily metrics
          $group: {
            _id: {
              year: { $year: "$createdAt" },
              month: { $month: "$createdAt" },
              day: { $dayOfMonth: "$createdAt" },
            },
            totalDailyOrders: { $sum: 1 }, // Count of orders
            totalSales: { $sum: "$priceAfterCouponDiscount" }, // Total sales of the day
            totalDailyProfit: {
              $sum: { $multiply: ["$priceAfterCouponDiscount", 0.1] },
            }, // 10% of total sales
          },
        },
        {
          // Project fields for readability and format date field
          $project: {
            _id: 0,
            date: {
              $dateFromParts: {
                year: "$_id.year",
                month: "$_id.month",
                day: "$_id.day",
              },
            },
            totalDailyOrders: 1,
            totalSales: 1,
            totalDailyProfit: 1,
          },
        },
        {
          // Sort by date in descending order
          $sort: { date: -1 },
        },
      ]);

      console.log("Daily data:", dailyMetrics);


      //----------------------- Daily data  end ---------------------

      //----------------------- Total sale amount -------------------

      const totalSaleAmount = await OrderSchema.aggregate([
        {
          $group:{
            _id:null,
            totalAmount:{$sum:"$priceAfterCouponDiscount"}
          }
        }
      ])

      const finalTotalSaleAmount = (totalSaleAmount.length > 0 ? totalSaleAmount[0].totalAmount : 0).toFixed(2)
      console.log("amt : ",finalTotalSaleAmount);
      

      //----------------------- Top selling products---------------------

      const filter = req.query.filter || "day";
      const dateFilter = applyDateFilter(filter);

      console.log("date filter********: ", filter);

      const topSellingProducts = await OrderSchema.aggregate([
        {
          $match: {
            orderStatus: { $in: ["Delivered", "Shipped", "Pending"] },
            isCancelled: false,
            createdAt: dateFilter.createdAt,
          },
        },
        {
          $unwind: "$products",
        },
        {
          $group: {
            _id: "$products.product_id",
            totalQuantitySold: {
              $sum: { $toInt: "$products.product_quantity" },
            },
            totalRevenue: { $sum: "$products.product_price" },
            productName: { $first: "$products.product_name" },
            productCategory: { $first: "$products.product_category" },
            productDiscount: { $first: "$products.product_discount" },
            productPrice: { $first: "$products.product_price" },
          },
        },
        {
          $sort: { totalQuantitySold: -1 },
        },
        {
          $limit: 10,
        },
      ]);

      const productData = await Product.populate(
        topSellingProducts,
        { path: "_id", select: "publisher category discount product_name" },
        { path: "productCategory", model: "category" }
      );

      console.log("----------Product data: ", productData);

      //----------------------- Top selling products end---------------------

      //----------------------- pie chart categgory perfomance  ---------------------

      const categoryFilter = req.query.filter || "day";
      const CategoryDateFilter = applyDateFilter(categoryFilter);

      const categoryPerfomance = await OrderSchema.aggregate([
        {
          $match: {
            orderStatus: { $in: ["Delivered", "Shipped", "Pending"] },
            isCancelled: false,
            createdAt: CategoryDateFilter.createdAt,
          },
        },
        { $unwind: "$products" },

        {
          // First lookup: Join with the Product collection to get product details
          $lookup: {
            from: "products", // Name of the product collection
            localField: "products.product_id",
            foreignField: "_id",
            as: "productData",
          },
        },

        {
          // Unwind the productData array to have direct access to product details
          $unwind: "$productData",
        },

        {
          // Second lookup: Join with the Category collection to get category details
          $lookup: {
            from: "categories", // Name of the category collection
            localField: "productData.category",
            foreignField: "_id",
            as: "categoryData",
          },
        },

        {
          // Unwind the categoryData array to get direct access to category details
          $unwind: "$categoryData",
        },

        {
          // Group by the category name
          $group: {
            _id: "$categoryData.collectionName", // Group by category name
            totalQuantitySold: {
              $sum: { $toInt: "$products.product_quantity" },
            },
          },    
        },
        {
          // Project the required fields
          $project: {
            _id: 0,
            category: "$_id", // Set category to the category name from the group _id
            totalQuantitySold: 1,
          },
        },
        { $sort: { totalQuantitySold: -1 } },
      ]);

      const categoryLabels = categoryPerfomance.map((item) => item.category);
      const categoryData = categoryPerfomance.map(
        (item) => item.totalQuantitySold
      );
      console.log(categoryLabels, "[][]][][[]", categoryData);



      //----------------------- pie chart categgory perfomance  end ---------------------

      //--------------- weekly dashboard data -----------------------

      const filterMain = req.query.filter || "week";

      const dateFilterMain = applyDateFilter(filterMain)

      const startOfWeek = new Date();
      startOfWeek.setDate(startOfWeek.getDate());
      startOfWeek.setHours(0, 0, 0, 0);

      const endOfWeek = new Date();
      endOfWeek.setDate(startOfWeek.getDate() + 6); // Set to the end of the week (Saturday)
      endOfWeek.setHours(23, 59, 59, 999);

      const metrics = await OrderSchema.aggregate([
        {
          $match: {
            orderStatus: { $in: ["Delivered", "Pending", "Shipped"] },
            isCancelled: false,
            createdAt: dateFilter.createdAt, // Apply the filtered date range
          },
        },
        {
          $group: {
            _id: { $dayOfMonth: "$createdAt" }, // Group by day of the month for weekly data (modify based on filter)
            totalDailySales: { $sum: "$totalPrice" }, // Sum of total sales
            totalDailyProfit: { $sum: { $multiply: ["$totalPrice", 0.1] } }, // Assume profit is 10% of total sales
          },
        },
        {
          $sort: { _id: 1 },
        },
      ]);
     

      const categories = metrics.map((metric) => `Day ${metric._id}`);
      const totalSalesData = metrics.map((metric) => metric.totalDailySales.toFixed(2));
      const totalProfitData = metrics.map((metric) => metric.totalDailyProfit.toFixed(2));

      console.log("category : ",categories);
      console.log("totalSalesData : ",totalSalesData);
      console.log("totalProfitData: ", totalProfitData);
      
      
      


      if (
        req.xhr ||
        req.headers["content-type"] === "application/json" ||
        req.headers.accept.indexOf("json") > -1
      ) {
        console.log("Fetch request detected");
        // Send JSON response for AJAX
        return res.json({
          topSellingProducts: productData,
          categoryLabels,
          categoryData,
          //main cart
          categories,
          totalSalesData,
          totalProfitData,
          finalTotalSaleAmount
        });
      }
      // Pass the data to the view
      res.render("admin/dashboardAdmin", {
        title: "AdminHome",
        dailyMetrics,
        totalUsers,
        topSellingProducts: productData,
        categories: JSON.stringify(categories), 
        totalSalesData: JSON.stringify(totalSalesData), 
        totalProfitData: JSON.stringify(totalProfitData),
        categoryLabels: JSON.stringify(categoryLabels),
        categoryData: JSON.stringify(categoryData),
        finalTotalSaleAmount
      });
    
  } catch (error) {
    console.error("Error in admin dashboard:", error);
    res.status(500).send("Internal Server Error");
  }
};

export const dashboardFilter = async (req, res) => {
  try {
    //--------------- graph filtered data------------------

    const filter = req.query.filter;
    let matchCondition = {
      orderStatus: { $in: ["Delivered", "Pending", "Shipped"] },
      isCancelled: false,
    };
    let startDate, endDate;

    switch (filter) {
      case "yesterday":
        startDate = new Date();
        startDate.setDate(startDate.getDate() - 1);
        startDate.setHours(0, 0, 0, 0);
        endDate = new Date();
        endDate.setDate(endDate.getDate() - 1);
        endDate.setHours(23, 59, 59, 999);
        break;

      case "today":
        startDate = new Date();
        startDate.setHours(0, 0, 0, 0);
        endDate = new Date();
        endDate.setHours(23, 59, 59, 999);
        break;

      case "thisWeek":
        startDate = new Date();
        startDate.setDate(startDate.getDate() - startDate.getDay()); // Start of the week
        startDate.setHours(0, 0, 0, 0);
        endDate = new Date();
        endDate.setHours(23, 59, 59, 999);
        break;
      case "thisMonth":
        startDate = new Date();
        startDate.setDate(1); // First day of the month
        startDate.setHours(0, 0, 0, 0);
        endDate = new Date();
        endDate.setHours(23, 59, 59, 999);
        break;
      case "thisYear":
        startDate = new Date(new Date().getFullYear(), 0, 1); // First day of the year
        startDate.setHours(0, 0, 0, 0);
        endDate = new Date();
        endDate.setHours(23, 59, 59, 999);
        break;

      default:
        // Default case can be today
        startDate = new Date();
        startDate.setHours(0, 0, 0, 0);
        endDate = new Date();
        endDate.setHours(23, 59, 59, 999);
    }

    matchCondition.createdAt = { $gte: startDate, $lt: endDate };

    const metrics = await OrderSchema.aggregate([
      { $match: matchCondition },
      {
        $group: {
          _id: null,
          totalSales: { $sum: "$priceAfterCouponDiscount" },
          totalProfit: {
            $sum: { $multiply: ["$priceAfterCouponDiscount", 0.1] },
          },
        },
      },
    ]);

    res.json({
      totalSales: metrics[0]?.totalSales || 0,
      totalProfit: metrics[0]?.totalProfit || 0,
    });
  } catch (error) {
    console.error("Error in admin dashboard:", error);
    res.status(500).send("Internal Server Error");
  }
};


HTML start 
<!-- views/admin/dashboardAdmin.ejs -->


<div style="display: flex; min-height: 100vh;">
    <!-- Sidebar -->


    <!-- Main Content -->
    <div style="flex-grow: 1; background-color: #1C1C1C; color: #FFFFFF;">


        <!-- Top section -->
        

        <div class="grid grid-cols-4 gap-4 p-4 bg-gray-900 dark:bg-gray-900">
            <!-- Total Views Card -->
            <div class="p-6 bg-gray-800 shadow rounded-lg text-gray-300 dark:text-gray-300">
              <div class="flex justify-between items-center mb-2">
                <span class="text-2xl font-bold">₹ <%= (dailyOrder[0] && dailyOrder[0].totalDailyProfit ? dailyOrder[0].totalDailyProfit.toFixed(2) : "0.00") %></span>
                <!-- <svg class="w-6 h-6 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A12.096 12.096 0 0112 3.5c-2.043 0-3.972.402-5.553 1.124L11 9M4.38 14H20m0 0l-5.932 2.898a12.096 12.096 0 01-4.068.602 12.096 12.096 0 01-4.068-.602L4 14"></path></svg> -->
              </div>
              <p class="text-sm">Total Daily Profit</p>
              <!-- <p class="text-sm text-green-400">0.43% &#8593;</p> -->
            </div>
          
            <!-- Total Profit Card -->
            <div class="p-6 bg-gray-800 shadow rounded-lg text-gray-300 dark:text-gray-300">
              <div class="flex justify-between items-center mb-2">
                <span class="text-2xl font-bold">₹ <%= (dailyOrder[0] && dailyOrder[0].totalSales ? dailyOrder[0].totalSales.toFixed() : "0.00") %></span>
                <!-- <svg class="w-6 h-6 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 11h14M12 5v14"></path></svg> -->
              </div>
              <p class="text-sm">Total Daily Sales</p>
              <!-- <p class="text-sm text-green-400">4.35% &#8593;</p> -->
            </div>
          
            <!-- Total Products Card -->
            <div class="p-6 bg-gray-800 shadow rounded-lg text-gray-300 dark:text-gray-300">
              <div class="flex justify-between items-center mb-2">
                <span class="text-2xl font-bold"><%= (dailyOrder[0] && dailyOrder[0].totalDailyOrders ? dailyOrder[0].totalDailyOrders : "0") %></span>
                <!-- <svg class="w-6 h-6 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 11h14M12 5v14"></path></svg> -->
              </div>
              <p class="text-sm">Total Daily Orders</p>
              <!-- <p class="text-sm text-green-400">2.59% &#8593;</p> -->
            </div>
          
            <!-- Total Users Card -->
            <div class="p-6 bg-gray-800 shadow rounded-lg text-gray-300 dark:text-gray-300">
              <div class="flex justify-between items-center mb-2">
                <span class="text-2xl font-bold"><%= totalUsers %></span>
                <!-- <svg class="w-6 h-6 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v14M5 11h14"></path></svg> -->
              </div>
              <p class="text-sm">Total Customers</p>
              <!-- <p class="text-sm text-red-400">0.95% &#8595;</p> -->
            </div>
          </div>

          


          <!----------------------------------------- Top section -------------------------------------------------->


        <!-------------------------------------- graph =------------------------------------------------>

        <div id="graph-data" class="grid grid-cols-4 mx-2 gap-2">
            <!-- First Chart - 3/4 of the width -->
            <div class="col-span-3 max-w-full w-full bg-white rounded-lg shadow dark:bg-gray-800 p-4 md:p-6">
                <div class="flex justify-between mb-5">
                    <div>
                        <h5 class="leading-none text-3xl font-bold text-gray-900 dark:text-white pb-2">₹ <%= finalTotalSaleAmount %></h5>
                        <p class="text-base font-normal text-green-500 dark:text-green-400">Total Sales</p>
                    </div>
                    <div class="flex items-center px-2.5 py-0.5 text-base font-semibold text-green-500 dark:text-green-500 text-center">
                        
                        
                    </div>
                </div>
                <div id="data-labels-chart"></div>
                <div class="grid grid-cols-1 items-center border-gray-200 border-t dark:border-gray-700 justify-between mt-5">
                    <div class="flex justify-between items-center pt-5">
                        <!-- Dropdown menu -->
                        <select id="mainGraphData" class="block px-4 py-2 rounded-lg shadow w-44 text-gray-700 dark:text-gray-200 bg-white dark:bg-gray-700">
                          <option value="day">Day</option>
                          <option value="week">Week</option>
                          <option value="month">Month</option>
                          <option value="year">Year</option>
                        </select>
                        <a href="/admin/salesReport" class="uppercase text-sm font-semibold inline-flex items-center rounded-lg text-blue-600 hover:text-blue-700 dark:hover:text-blue-500 hover:bg-gray-100 dark:hover:bg-gray-700 dark:focus:ring-gray-700 dark:border-gray-700 px-3 py-2">
                            Sales Report
                            <svg class="w-2.5 h-2.5 ms-1.5 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4" />
                            </svg>
                        </a>
                    </div>
                </div>
            </div>




             <!-------------------------------------- graph end=------------------------------------------------>

        
            <!-- Second Chart - 1/4 of the width -->
            <div class="col-span-1 max-w-full  w-full bg-white rounded-lg shadow dark:bg-gray-800 py-5 md:p-6">
              <!-- Header Section with Chart Title and Info Icon -->
              <div class="flex justify-between mb-3">
                <div class="flex items-center">
                  <h5 class="text-xl font-bold leading-none text-gray-900 dark:text-white pe-1">Category Performance</h5>
                  <!-- Info Icon -->
                  <!-- <svg data-popover-target="chart-info" data-popover-placement="bottom" class="w-3.5 h-3.5 text-gray-500 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white cursor-pointer ms-1" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm0 16a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3Zm1-5.034V12a1 1 0 0 1-2 0v-1.418a1 1 0 0 1 1.038-.999 1.436 1.436 0 0 0 1.488-1.441 1.501 1.501 0 1 0-3-.116.986.986 0 0 1-1.037.961 1 1 0 0 1-.96-1.037A3.5 3.5 0 1 1 11 11.466Z" />
                  </svg> -->
                  <!-- Popover Tooltip Content -->
                  <div id="chart-info" class="hidden text-sm text-gray-500 bg-white border border-gray-200 rounded-lg shadow-sm p-3 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600">
                    <h3 class="font-semibold text-gray-900 dark:text-white">Activity Growth</h3>
                    <p>This chart helps you understand the performance of your categories over time. Select a filter to view data for the specified period.</p>
                  </div>
                </div>
                <!-- Download Data Button -->
                <!-- <button id="download-data" class="text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:ring-4 rounded-lg text-sm w-8 h-8 flex items-center justify-center">
                  <svg class="w-4 h-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 16 18">
                    <path stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" d="M8 1v11m0 0 4-4m-4 4L4 8m11 4v3a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-3"/>
                  </svg>
                  <span class="sr-only">Download CSV</span>
                </button> -->
              </div>
            
              <!-- Donut Chart -->
              <div class="py-3 mb-3" id="donut-chart"></div>
            
              <!-- Dropdown Menu for Filter Options -->
              <div class="flex justify-between items-center pt-5">
                <select id="categoryDropdown" class="block px-4 py-2 rounded-lg shadow w-44  text-gray-700 dark:text-gray-200 bg-white dark:bg-gray-700">
                  <option value="day">Day</option>
                  <option value="week">Week</option>
                  <option value="month">Month</option>
                  <option value="year">Year</option>
                </select>
                <a href="#" class="uppercase text-sm font-semibold text-blue-600 hover:text-blue-700 dark:hover:text-blue-500 hover:bg-gray-100 dark:hover:bg-gray-700 px-3 py-2 rounded-lg">
                  Filter
                </a>
              </div>
            </div>



           
              </div>
               <!-----------------------------Table top selling products ---------------------------->

            <div class="container mx-auto px-4 py-8">
              <!-- Filter Dropdown -->
              <div class="flex justify-between items-center mb-4">
                <h2 class="text-2xl font-semibold text-gray-100">Top Selling Products</h2>
                <div class="relative inline-block w-64">
                  <label for="filter" class="block mb-1 text-gray-300">Filter By:</label>
                  <select id="filter" class="w-full px-3 py-2 bg-gray-800 text-gray-300 border border-gray-600 rounded-md">
                    <option value="day">Day</option>
                    <option value="week">Week</option>
                    <option value="month">Month</option>
                    <option value="year">Year</option>
                  </select>
                </div>
              </div>
            
              <!-- Table for Top Selling Products -->
              <div class="overflow-x-auto">
                <table class="min-w-full bg-gray-900 border border-gray-700">
                  <thead class="bg-gray-800 border-b border-gray-700">
                    <tr>
                      <th class="py-3 px-4 text-left text-gray-300 font-semibold">Product Name</th>
                      <!-- <th class="py-3 px-4 text-left text-gray-300 font-semibold">Category</th> -->
                      <th class="py-3 px-4 text-left text-gray-300 font-semibold">Total Quantity Sold</th>
                      <th class="py-3 px-4 text-left text-gray-300 font-semibold">Revenue</th>
                      <th class="py-3 px-4 text-left text-gray-300 font-semibold">Discount (%)</th>
                      <th class="py-3 px-4 text-left text-gray-300 font-semibold">Publisher</th>
                    </tr>
                  </thead>
                  <tbody>
                    <!-- Dummy Data Rows -->
                     <% if(topSellingProducts.length > 0 ){ %>
                      <% topSellingProducts.forEach(product=>{ %>
                    <tr class="border-b border-gray-700">
                      <td class="py-3 px-4 text-gray-400"><%= product.productName %></td>
                      <!-- <td class="py-3 px-4 text-gray-400"><%= %></td> -->
                      <td class="py-3 px-4 text-gray-400"><%= product.totalQuantitySold %></td>
                      <td class="py-3 px-4 text-gray-400"><%= product.totalRevenue.toFixed(2) %></td>
                      <td class="py-3 px-4 text-gray-400"><%= product._id.discount %>%</td>
                      <td class="py-3 px-4 text-gray-400"><%= product._id.publisher %></td>
                    </tr>
                    <% }) %>
                    <% }else{ %>

                      <p>No product found</p>

                    <% } %>
                   
                    <!-- Add more rows as needed -->
                  </tbody>
                </table>  
            </div>
            








        </div>
                <!-- graph -->     
    </div>
</div>

<!-- Chart Container -->

<!-- Add ApexCharts CDN in the head of your HTML -->
<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>

<script>




const categories = <%- categories %>;
const totalSalesData = <%- totalSalesData %>; // Sales data for the chart
const totalProfitData = <%- totalProfitData %>; // Profit data for the chart 





// -------------------------------------------- Graph section --------------------------------------
  // Load ApexCharts CDN dynamically
  let chartMain; // Declare the chart globally

// Function to render the chart
function renderGraph(categories, salesData, profitData) {
  const options = {
    dataLabels: {
      enabled: true,
      style: {
        cssClass: 'text-xs text-white font-medium',
      },
    },
    grid: {
      show: false,
      strokeDashArray: 4,
      padding: {
        left: 16,
        right: 16,
        top: -26,
      },
    },
    series: [
      {
        name: "Total Sales",
        data: salesData,
        color: "#1A56DB",
      },
      {
        name: "Total Profit",
        data: profitData,
        color: "#7E3BF2",
      },
    ],
    chart: {
      height: "100%",
      type: "area",
      fontFamily: "Inter, sans-serif",
      dropShadow: {
        enabled: false,
      },
      toolbar: {
        show: false,
      },
    },
    tooltip: {
      enabled: true,
      x: {
        show: false,
      },
      theme:"dark",
      style:{
        fontSize:'12px',
        color:'#FFFFFF'
      },
      fillSeriesColor: false, // Use custom color instead of series color
      background: {
      color: "#333333", // Customize tooltip background color
    },
    },
    legend: {
      show: true,
    },
    fill: {
      type: "gradient",
      gradient: {
        opacityFrom: 0.55,
        opacityTo: 0,
        shade: "#1C64F2",
        gradientToColors: ["#1C64F2"],
      },
    },
    stroke: {
      width: 6,
    },
    xaxis: {
      categories: categories,
      labels: {
        show: true,
        style: {
          fontSize: '12px',
          colors: '#A0AEC0',
        },
      },
      axisTicks: { show: false },
    },
    yaxis: {
      labels: {
        formatter: (value) => `₹${value.toFixed(2)}`,
        style: {
          fontSize: '12px',
          colors: '#A0AEC0',
        },
      },
    },
  };

  if (chartMain) {
    chartMain.destroy();
  }
  
  // Create a new chart instance
  chartMain = new ApexCharts(document.getElementById("data-labels-chart"), options);
  chartMain.render();
}

// Initial chart rendering
renderGraph(categories, totalSalesData, totalProfitData);


  document.getElementById('mainGraphData').addEventListener('change', function () {
    const selectedFilter = this.value;
  fetch(`/admin/dashboard?filter=${selectedFilter}`,{
    method:"POST",
    headers:{
      'Content-Type': 'application/json',
    }
  })
    .then((response) => response.json())
    .then((data) => {
      // Update the chart with new data
      renderGraph(data.categories, data.totalSalesData, data.totalProfitData);
    })
    .catch((error) => console.error('Error fetching filtered data:', error));
  })
// -------------------------------------------- Graph section --------------------------------------





//--------------------------------------------- Pie chart ------------------------------------------


let chart;

const initialCategoryLabels = <%- categoryLabels %>;
const initialCategoryData = <%- categoryData %>;

console.log(initialCategoryData);



function renderChart(labels, data) {
    const chartOptions = {
      series: data, 
      chart: {
        height: 320,
        type: 'donut',
      },
      colors: ['#1C64F2', '#16BDCA', '#9061F9'],
      labels: labels,
      plotOptions: {
        pie: {
          donut: {
            size: '65%',
          }
        }
      },
      dataLabels: {
        enabled: true,
        style: {
          fontFamily: 'Inter, sans-serif',
        },
      },
      legend: {
        position: 'bottom',
        fontFamily: 'Inter, sans-serif',
      },
    };

    if (chart) {
      chart.destroy();  // Destroy the previous chart if it exists
    }
    chart = new ApexCharts(document.getElementById('donut-chart'), chartOptions);
    chart.render();

  }

  renderChart(initialCategoryLabels, initialCategoryData);



  

document.getElementById('categoryDropdown').addEventListener('change', function() {
  const selectedFilter = this.value;

  console.log(selectedFilter);

  fetch(`/admin/dashboard?filter=${selectedFilter}`,{
    method:'POST',
    headers:{
      'Content-Type': 'application/json',
    }
  })
  .then(response=>response.json())
  .then(data=>{
    
    
    renderChart(data.categoryLabels, data.categoryData);

  })
.catch(error => console.error('Error fetching filtered data:', error));

})








//--------------------------------------------- Pie chart -------------------------------------


// document.getElementById('lastDaysDropdown').addEventListener('change',function(){
//   const selectedOption = this.value;

//   console.log(selectedOption);
  

//   fetch(`/admin/dashboardFilter?filter=${selectedOption}`)
//   .then(response=>response.json())
//   .then(data=>{
//     updateChart(data)
//   })
//   .catch(error=>console.error('Error featching data:',error))
// })

function updateChart(data){

}


document.getElementById('filter').addEventListener('change', function() {
  const filterValue = this.value;

  console.log(filterValue);
  

  // Fetch the filtered data based on the filter value
  fetch(`/admin/dashboard?filter=${filterValue}`,{
    method:'POST',
    headers:{
      'Content-Type': 'application/json',
    }
  })
    .then(response => {
    
      if (!response.ok) {
        throw new Error("Network response was not ok");
      }
      return response.json();
    })
    .then(data => {
      console.log(data);
      // Call updateTable with the topSellingProducts array from the response
      updateTable(data.topSellingProducts);
    })
    .catch(error => console.error('Error fetching data:', error));
});

function updateTable(products) {
  const tbody = document.querySelector('tbody');

  // Clear the existing rows
  tbody.innerHTML = '';

  if (products.length > 0) {
    // Iterate over products and create rows
    products.forEach(product => {
      const row = `
        <tr class="border-b border-gray-700">
          <td class="py-3 px-4 text-gray-400">${product.productName}</td>
          <td class="py-3 px-4 text-gray-400">${product.totalQuantitySold}</td>
          <td class="py-3 px-4 text-gray-400">${product.totalRevenue.toFixed(2)}</td>
          <td class="py-3 px-4 text-gray-400">${product._id.discount}%</td>
          <td class="py-3 px-4 text-gray-400">${product._id.publisher}</td>
        </tr>
      `;
      tbody.innerHTML += row; // Append the new row to the table body
    });
  } else {
    // If no products found, show a message
    tbody.innerHTML = `
      <tr>
        <td colspan="5" class="py-3 px-4 text-gray-400">No products found for this filter</td>
      </tr>
    `;
  }
}









</script>

HTML end