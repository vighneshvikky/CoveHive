<%- include('../layouts/userHeader.ejs') %>

<div class="container mx-auto my-8">
    <div class="grid grid-cols-1 xl:grid-cols-2 gap-8">
        <!-- Shipping and Payment Information -->
        <div class="bg-white shadow-lg rounded-lg p-6 border border-[#14213d]">
    <form action="/place-order" method="POST" id="orderForm">
                <ol class="space-y-6">
                    <!-- Shipping Info -->
              <!-- Shipping Info -->
<li class="relative pl-10">
    <div class="absolute -left-8 top-0 w-8 h-8  flex items-center justify-center">
        <i class="bx bxs-truck text-xl"></i>
    </div>
    <div>
        <div id="addressList" class="mt-4">
            <!-- Newly added addresses will appear here -->
            <h5 class="text-lg font-semibold text-[#14213d] mb-2">Shipping Info</h5>
            <div class="text-gray-600">
                <span class="block text-sm">Saved Address</span>
                <% if (addresses.length > 0) { %>
                    <% addresses.forEach((address, index) => { %>
                        <label class="block my-3">
                            <div class="address-card flex items-center p-3 border border-[#14213d] rounded-lg cursor-pointer peer-checked:bg-gray-200 peer-checked:border-gray-500" 
                                 onclick="selectAddress(this, '<%= index %>')">
                                <!-- Styled Radio Button -->
                                <input 
                                    type="radio" 
                                    name="selectedAddress" 
                                    class="form-radio h-4 w-4 text-[#14213d] border-gray-300 focus:ring-[#14213d] mr-3" 
                                    value="<%= address._id %>">
                                <p class="text-[#14213d]">
                                    <%= address.fullName %>, <%= address.street %>, <%= address.city %>, <%= address.country %>, <%= address.state %>, <%= address.pincode %>
                                </p>
                            </div>
                        </label>
                    <% }) %>
                <% } else { %>
                    <p class="text-red-500">No addresses available. Please add a new address.</p>
                <% } %>
                
            </div>
        </div>
  
 
    </div>
</li>
                    <!-- Payment Method -->
                    <div class="payment-methods mt-4">
                        <h2>Payment method :</h2>
                        <div class="payment-options">
                            <div class="payment-method" onclick="selectPaymentMethod(this, 0)">
                                <i class="bi bi-cash" style="font-size: 2rem;"></i>
                                <span>Cash on Delivery</span>
                            </div>
                            <div class="payment-method" onclick="selectPaymentMethod(this, 1)">
                                <i class="bi bi-wallet-fill" style="font-size: 2rem;"></i>
                                <span>Wallet</span>
                                <span>Balance : <%= //wallet.balance %></span>
                            </div>
                            <div class="payment-method" onclick="selectPaymentMethod(this, 2)">
                                <i class="bi bi-paypal" style="font-size: 2rem;"></i>
                                <span>Razorpay</span>
                            </div>
                        </div>
                    </div>
                </div>
                </ol>
               <!-- <h1>payableAmount = <%= cartDetails.payableAmount%></h1> -->
                <!-- Buttons -->
                <div class="flex justify-between mt-8">
                    <a href="/cart" class="px-4 py-2 bg-[#14213d] text-white rounded-lg hover:bg-black">
                        <i class="mdi mdi-arrow-left mr-2"></i> Continue Shopping
                    </a>
                    <form action="" method="post" id="place-order-form">
                        <button type="submit" class="bg-slate-400"
                            data-amount="<%= cartDetails.items.reduce((total, item) => total + (item.productDiscountPrice * item.productCount), 0).toFixed(2) %>"
                            data-username="<%= user.name %>" data-mail="<%= user.email %>"
                            data-phone="<%= user.phone %>" id="place-order-btn">Place
                            order</button>
                    </form>
                </div>
            </form>
        </div>

        <!-- Order Summary -->
        <div class="bg-white shadow-lg rounded-lg p-6 border border-[#14213d]">
            <div class="bg-gray-200 p-4 mb-4">
                <h5 class="text-lg font-semibold text-[#14213d]">Order Summary <span class="float-right">#MN0124</span></h5>
            </div>
            <div class="overflow-x-auto">
                <table class="min-w-full table-auto">
                    <thead>
                        <tr>
                            <th class="text-left text-[#14213d] py-2">Product</th>
                            <th class="text-left text-[#14213d] py-2">Product Desc</th>
                            <th class="text-left text-[#14213d] py-2">Price</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% cartDetails.items.forEach(item => { %>
                            <tr>
                                <td><img src="/uploads/<%= item.productImage %>" alt="<%= item.productId.name %>" class="w-16 h-16 rounded-lg"></td>
                                <td>
                                    <h5 class="text-sm font-semibold text-[#14213d]"><%= item.productId.name %></h5>
                                    <p class="text-gray-500 text-sm"><%= item.productDiscountPrice.toFixed(2) %> x <%= item.productCount %></p>
                                </td>
                                <td class="text-[#14213d]">$<%= (item.productDiscountPrice * item.productCount).toFixed(2) %></td>
                            </tr>
                        <% }) %>
                        <tr class="bg-gray-100">
                            <td colspan="2" class="text-right text-[#14213d] font-semibold py-2">Total:</td>
                             <td class="text-[#14213d] font-semibold"><%= cartDetails.items.reduce((total, item) => total + (item.productDiscountPrice * item.productCount), 0).toFixed(2) %></td> 
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
<!-- Button to Open the Modal -->
<button onclick="toggleModal(true)" class="bg-blue-500 text-white font-bold py-2 px-4 rounded">
    Add Address
</button>

<!-- Modal Structure -->
<div id="addressModal" class="fixed inset-0 z-50 hidden overflow-y-auto">
    <div class="flex items-center justify-center min-h-screen">
        <div class="relative w-full max-w-md p-6 bg-white rounded-lg shadow-lg">
            <!-- Close Button -->
            <button onclick="toggleModal(false)" class="absolute top-2 right-2 text-gray-500 hover:text-gray-700">
                Ã—
            </button>

            <!-- Modal Content -->
            <h2 class="text-2xl font-semibold mb-4">Add Address</h2>
            <form id="addressForm" onsubmit="submitAddress(event)">
                <div class="mb-4">
                    <label for="fullName" class="block text-gray-700">Full Name</label>
                    <input type="text" id="fullName" name="fullName" required class="w-full border border-gray-300 rounded p-2">
                    <p id="fullNameError" class="text-red-500 text-sm hidden">Full name is required and should be at least 3 characters long.</p>
                </div>
                <div class="mb-4">
                    <label for="street" class="block text-gray-700">Street</label>
                    <input type="text" id="street" name="street" required class="w-full border border-gray-300 rounded p-2">
                    <p id="streetError" class="text-red-500 text-sm hidden">Street is required and should be at least 5 characters long.</p>
                </div>
                <div class="mb-4">
                    <label for="city" class="block text-gray-700">City</label>
                    <input type="text" id="city" name="city" required class="w-full border border-gray-300 rounded p-2">
                    <p id="cityError" class="text-red-500 text-sm hidden">City is required and should be at least 3 characters long.</p>
                </div>
                <div class="mb-4">
                    <label for="pincode" class="block text-gray-700">Pincode</label>
                    <input type="text" id="pincode" name="pincode" required class="w-full border border-gray-300 rounded p-2">
                    <p id="pincodeError" class="text-red-500 text-sm hidden">Pincode is required and should be a 5-digit number.</p>
                </div>
                <div class="mb-4">
                    <label for="state" class="block text-gray-700">State</label>
                    <input type="text" id="state" name="state" required class="w-full border border-gray-300 rounded p-2">
                    <p id="stateError" class="text-red-500 text-sm hidden">State is required.</p>
                </div>
                <div class="mb-4">
                    <label for="country" class="block text-gray-700">Country</label>
                    <input type="text" id="country" name="country" required class="w-full border border-gray-300 rounded p-2">
                    <p id="countryError" class="text-red-500 text-sm hidden">Country is required.</p>
                </div>
             
                <button type="submit" class="w-full bg-blue-500 text-white py-2 rounded hover:bg-blue-600">
                    Save Address
                </button>
            </form>
        </div>
    </div>
</div>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>    
<script>
        let selectedAddressIndex = null;
        let selectedPaymentMethod = null;
        const orderPlacementBtn = document.getElementById('place-order-btn');
        const totalNum = orderPlacementBtn.getAttribute('data-amount');
        let totalAmount = orderPlacementBtn.getAttribute('data-amount');
        const username = orderPlacementBtn.getAttribute('data-username');
        const email = orderPlacementBtn.getAttribute('data-email');
        const phone = orderPlacementBtn.getAttribute('data-phone');
// Function to toggle modal visibility
// Function to toggle modal visibility

function toggleModal(show) {
    const modal = document.getElementById("addressModal");
    modal.classList.toggle("hidden", !show);
}
function selectPaymentMethod(element, method) {
    console.log('hai')
            const methods = document.querySelectorAll('.payment-method');
            methods.forEach(methodElement => methodElement.classList.remove('selected'));
            element.classList.add('selected');
            selectedPaymentMethod = method;
        }

function selectAddress(element,index){
 const cards = document.querySelectorAll('.address-card');
 cards.forEach(card => card.classList.remove('selected'));
 element.classList.add('selected');
 selectedAddressIndex = index;

 console.log(`selectedAdd = ${selectedAddressIndex}`);
 
}        


orderPlacementBtn.addEventListener('click', (e) => {
            e.preventDefault();
            console.log('prevented submitting')
            if (selectedAddressIndex === null) {
                Swal.fire({
                    icon: "warning",
                    title: "Please select a shipping address.",
                    text: "Select one"
                });
                return;
            }
            if (selectedPaymentMethod === null) {
                Swal.fire({
                    icon: "warning",
                    title: "Please select a payment method.",
                    text: "Select one"
                });
                return;
            }
            if (selectedPaymentMethod === 2) {
                openRazorpayPayment();
            } else {
                placeOrder(selectedAddressIndex, selectedPaymentMethod);
            }
        });

        function openRazorpayPayment() {
            const URL = `/payment-render/${totalAmount}`;
            fetch(URL, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                }
            })
                .then(res => {
                    if (!res.ok) {
                        throw new Error("Cannot render the payment page");
                    }
                    return res.json();
                })
                .then(data => {
                    if (data.orderID) {
                        const options = {
                            key: "rzp_test_KDYrLJHnu3O9Ip",
                            amount: totalAmount * 100,
                            currency: "INR",
                            name: "CoveHive",
                            order_id: data.orderID,
                            handler: function (response) {
                                //const couponCode = document.getElementById('couponCode').value.trim();
                                const URL = `/place-order/${selectedAddressIndex}/${selectedPaymentMethod}`;
                                fetch(URL, {
                                    method: "POST",
                                    headers: {
                                        'Content-Type': "application/json"
                                    },
                                    body: JSON.stringify({
                                        razorpay_payment_id: response.razorpay_payment_id,
                                        razorpay_order_id: response.razorpay_order_id,
                                        razorpay_signature: response.razorpay_signature,
                                        // couponCode: couponCode
                                    })
                                }).then((res) => {
                                    if (res.redirected)
                                        window.location.href = res.url
                                    if (!res.ok) {
                                        throw new Error("Order placement failed");
                                    }
                                    return res.json();
                                }).then(data => {
                                    if (data.success) {
                                        window.location.href = "/conform-order";
                                    } else {
                                        Swal.fire({
                                            icon: "error",
                                            title: "Order Placement Failed",
                                            text: data.message
                                        });
                                    }
                                }).catch(err => {
                                    console.error("Error on Razorpay payment callback:", err);
                                    Swal.fire({
                                        icon: "error",
                                        title: "Error",
                                        text: "An error occurred while processing the order."
                                    });
                                });
                            },
                            prefill: {
                                name: username,
                                email: email,
                                contact: phone
                            },
                            notes: {
                                address: "Razorpay Corporate Office"
                            },
                            theme: {
                                color: "#6351CE"
                            }
                        };
                        const rzp1 = new Razorpay(options);
                        rzp1.on('payment.failed', function (response) {
                            const couponCode = document.getElementById('couponCode').value.trim();
                            const URL = `/place-order/${selectedAddressIndex}/${selectedPaymentMethod}`;
                            fetch(URL, {
                                method: "POST",
                                headers: {
                                    'Content-Type': "application/json"
                                },
                                body: JSON.stringify({
                                    razorpay_payment_id: response.error.metadata.payment_id,
                                    razorpay_order_id: response.error.metadata.order_id,
                                    razorpay_signature: response.error.metadata.signature,
                                    payment_status: "Pending",
                                    couponCode: couponCode
                                })
                            })
                                .then((res) => {
                                    if (res.redirected) {
                                        window.location.href = res.url;
                                    } else if (!res.ok) {
                                        throw new Error("Order placement failed");
                                    } else {
                                        return res.json();
                                    }
                                })
                                .then(data => {
                                    if (data.success) {
                                        window.location.href = "/failed-order";
                                    } else {
                                        Swal.fire({
                                            icon: "error",
                                            title: "Order Placement Failed",
                                            text: data.message
                                        });
                                    }
                                })
                                .catch(err => {
                                    console.error("Error on payment failure callback:", err);
                                    Swal.fire({
                                        icon: "error",
                                        title: "Error",
                                        text: "An error occurred while processing the order."
                                    });
                                });
                        });
                        rzp1.open();
                    } else {
                        throw new Error("Order ID not received");
                    }
                })
                .catch(error => {
                    Swal.fire({
                        icon: "error",
                        title: "Error on loading payment method",
                        text: error.message
                    });
                    console.error("Error during payment initiation:", error);
                });
        }

// Function to add the new address to the address list in the DOM
function addAddressToList(address) {
    const addressList = document.getElementById("addressList"); // Make sure you have an element with this ID in your HTML

    // Create a new address element
    const addressItem = document.createElement("div");
    addressItem.className = "address-item p-4 border mb-2";
    addressItem.innerHTML = `
        <label class="block my-3">
            <div class="flex items-center p-3 border border-[#14213d] rounded-lg cursor-pointer peer-checked:bg-gray-200 peer-checked:border-gray-500">
                <!-- Styled Radio Button -->
                <input type="radio" name="selectedAddress" class="form-radio h-4 w-4 text-[#14213d] border-gray-300 focus:ring-[#14213d] mr-3" value="${address._id}">
                <p class="text-[#14213d]">
                    ${address.fullName}, ${address.street}, ${address.city}, ${address.country}, ${address.state}, ${address.pincode}
                </p>
            </div>
        </label>
    `;

    // Append the new address to the list
    addressList.appendChild(addressItem);
}

// Form submission handler with validation
async function submitAddress(event) {
    event.preventDefault();

    // Clear previous errors
    clearErrors();

    // Get form values
    const fullName = document.getElementById("fullName").value.trim();
    const street = document.getElementById("street").value.trim();
    const city = document.getElementById("city").value.trim();
    const pincode = document.getElementById("pincode").value.trim();
    const state = document.getElementById("state").value.trim();
    const country = document.getElementById("country").value.trim();
 

    let isValid = true;

    // Validate each field
    function isFirstLetterCapitalAndNoSpaces(value) {
    const pattern = /^[A-Z][a-zA-Z]*$/; // Capital letter followed by letters with no spaces
    return pattern.test(value);
}

if (fullName.length < 3 || !isFirstLetterCapitalAndNoSpaces(fullName)) {
    displayError("fullNameError");
    isValid = false;
}
if (street.length < 5 || !isFirstLetterCapitalAndNoSpaces(street)) {
    displayError("streetError");
    isValid = false;
}
if (city.length < 3 || !isFirstLetterCapitalAndNoSpaces(city)) {
    displayError("cityError");
    isValid = false;
}
const pincodePattern = /^[0-9]{6}$/;
if (!pincodePattern.test(pincode)) {
    displayError("pincodeError");
    isValid = false;
}
if (state.length === 0 || !isFirstLetterCapitalAndNoSpaces(state)) {
    displayError("stateError");
    isValid = false;
}
if (country.length === 0 || !isFirstLetterCapitalAndNoSpaces(country)) {
    displayError("countryError");
    isValid = false;
}

    // If all fields are valid, proceed to submit the data
    if (isValid) {
        const addressData = {
            fullName,
            street,
            city,
            pincode,
            state,
            country,
           
        };

        try {
            // Send data to the backend route
            const response = await fetch('/checkout-address', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(addressData)
            });

            if (response.ok) {
                // Show SweetAlert success message
                Swal.fire({
                    icon: 'success',
                    title: 'Address Added!',
                    text: 'Your address was successfully added.',
                    confirmButtonText: 'OK'
                }).then(() => {
                    // Close the modal and reset the form after a successful submission
                    document.getElementById("addressForm").reset();
                    toggleModal(false);

                    // Add the new address to the address list
                    addAddressToList(addressData);
                });
            } else {
                // Show SweetAlert error message on failure
                Swal.fire({
                    icon: 'error',
                    title: 'Failed to Add Address',
                    text: 'Please try again later.',
                    confirmButtonText: 'OK'
                });
            }
        } catch (error) {
            console.error("Error:", error);
            Swal.fire({
                icon: 'error',
                title: 'Network Error',
                text: 'Could not connect to the server.',
                confirmButtonText: 'OK'
            });
        }
    }
}

// Function to show error message
function displayError(errorId) {
    document.getElementById(errorId).classList.remove("hidden");
}

// Function to clear all error messages
function clearErrors() {
    const errorElements = document.querySelectorAll("p.text-red-500");
    errorElements.forEach((el) => el.classList.add("hidden"));
}

</script>
<style>
     /*------------------------------- payment option ----------------------------*/

     .payment-methods {
    background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
    border-radius: 12px;
    padding: 30px;
    max-width: 800px;
    margin: 0 auto;
    box-shadow: 0 10px 25px rgba(0, 123, 255, 0.1);
    border: 1px solid #e9ecef;
    transition: all 0.3s ease;
}

.payment-options {
    display: flex;
    justify-content: space-around;
    align-items: center;
    flex-wrap: wrap;
    gap: 20px;
}

.payment-method {
    margin: 1rem;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    width: 160px;
    padding: 15px;
    border: 2px solid #e6e6e6;
    border-radius: 10px;
    background-color: #ffffff;
    transition: all 0.3s ease;
    cursor: pointer;
    position: relative;
    overflow: hidden;
    box-shadow: 0 4px 6px rgba(0, 123, 255, 0.05);
}

.payment-method::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(45deg, transparent, rgba(0, 123, 255, 0.05), transparent);
    transform: translateX(-100%);
    transition: transform 0.3s ease;
}

.payment-method:hover::before {
    transform: translateX(100%);
}

.payment-method:hover {
    border-color: #007bff;
    transform: translateY(-5px);
    box-shadow: 0 8px 15px rgba(0, 123, 255, 0.15);
    background-color: #f0f7ff;
}

.payment-method img {
    width: 50px;
    height: 50px;
    margin: 10px;
    object-fit: contain;
    transition: all 0.3s ease;
    opacity: 0.7;
}

.payment-method:hover img {
    transform: scale(1.1);
    opacity: 1;
}

.payment-method.selected {
    border-color: #007bff;
    background-color: #e6f2ff;
    box-shadow: 0 6px 10px rgba(0, 123, 255, 0.1);
}

.payment-method p {
    margin-top: 10px;
    color: #6c757d;
    font-size: 0.9rem;
    text-align: center;
}

@media (max-width: 768px) {
    .payment-methods {
        padding: 20px;
    }

    .payment-options {
        flex-direction: column;
    }

    .payment-method {
        width: 100%;
        max-width: 300px;
        margin: 10px 0;
    }
}

/* Accessibility and focus states */
.payment-method:focus-visible {
    outline: 3px solid #007bff;
    outline-offset: 2px;
}
</style>
<%- include('../layouts/userFooter.ejs') %>