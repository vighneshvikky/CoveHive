<%- include('../layouts/userHeader.ejs') %>

<!-- jQuery -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<!-- Bootstrap JS -->
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

<div class="container mx-auto mt-8 px-4">
  <nav class="flex" aria-label="Breadcrumb">
  <ol class="inline-flex items-center space-x-1 md:space-x-2 rtl:space-x-reverse">
    <li class="inline-flex items-center">
      <a href="/home" class="inline-flex items-center text-sm font-medium text-gray-700 hover:text-blue-600 dark:text-gray-400 dark:hover:text-white">
        <svg class="w-3 h-3 me-2.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
          <path d="m19.707 9.293-2-2-7-7a1 1 0 0 0-1.414 0l-7 7-2 2a1 1 0 0 0 1.414 1.414L2 10.414V18a2 2 0 0 0 2 2h3a1 1 0 0 0 1-1v-4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v4a1 1 0 0 0 1 1h3a2 2 0 0 0 2-2v-7.586l.293.293a1 1 0 0 0 1.414-1.414Z"/>
        </svg>
        Home
      </a>
    </li>
    <li>
      <div class="flex items-center">
        <svg class="rtl:rotate-180 w-3 h-3 text-gray-400 mx-1" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
          <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
        </svg>
        <a href="/profile" class="ms-1 text-sm font-medium text-gray-700 hover:text-blue-600 md:ms-2 dark:text-gray-400 dark:hover:text-white">Profile</a>
      </div>
    </li>
    <li aria-current="page">
      <div class="flex items-center">
        <svg class="rtl:rotate-180 w-3 h-3 text-gray-400 mx-1" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
          <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
        </svg>
        <span class="ms-1 text-sm font-medium text-gray-500 md:ms-2 dark:text-gray-400">Orders</span>
      </div>
    </li>
  </ol>
</nav>

  <div class="flex justify-center">
      <div class="w-full max-w-4xl">
          <!-- Order Card -->
          <% orderDetails.forEach(order => { %>
              <div class="mb-6 overflow-hidden bg-white rounded-lg shadow-md border border-gray-100">
                  <% order.items.forEach(item => { %>
                    
                      <div class="flex flex-col md:flex-row p-6 gap-6">
                          <button onclick="viewOrder('<%=order._id%>')"><img src="/uploads/<%= item.productImage %>" 
                                
                            class="w-full md:w-48 h-48 object-cover rounded-lg"></button>
                          
                          <div class="flex-1 space-y-4">
                              <div class="flex justify-between items-start">
                                  <h5 class="text-xl font-semibold text-gray-900">
                                      <%=item.productId.name%>
                                  </h5>
                                  <p class="text-lg font-bold text-gray-900">
                                    <i class="fa-solid fa-indian-rupee-sign"></i><%= item.productDiscountPrice.toFixed(2) %> x <%= item.productCount %>%>
                                  </p>
                              </div>

                              <!-- Delivery Status Section -->
                              <div id="delivery-status-<%= order._id %>" class="space-y-2">
                                  <% if (item.productStatus === 'Cancelled') { %>
                                      <div class="flex items-center gap-2">
                                          <span class="w-2.5 h-2.5 rounded-full bg-red-500"></span>
                                          <strong class="font-medium text-red-600">Cancelled</strong>
                                      </div>
                                      <p class="text-gray-600 text-sm">Your order has been cancelled.</p>
                                  <% } else if (item.productStatus === 'Delivered') { %>
                                      <div class="flex items-center gap-2">
                                          <span class="w-2.5 h-2.5 rounded-full bg-green-500"></span>
                                          <strong class="font-medium text-green-600">Delivered</strong>
                                          <span class="text-gray-600">on <%= order.deliveryDate %></span>
                                      </div>
                                      <p class="text-gray-600 text-sm">Your item has been delivered.</p>
                                  <% } else if (item.productStatus === 'Pending') { %>
                                      <div class="flex items-center gap-2">
                                          <span class="w-2.5 h-2.5 rounded-full bg-yellow-500"></span>
                                          <strong class="font-medium text-yellow-600">Pending</strong>
                                      </div>
                                      <p class="text-gray-600 text-sm">Your order is Pending.</p>
                                  <% }else if (item.productStatus === 'Requested') { %>
                                    <div class="flex items-center gap-2">
                                      <span class="w-2.5 h-2.5 rounded-full bg-violet-500"></span>
                                      <strong class="font-medium text-violet-600">Requested</strong>
                                  </div>
                                  <p class="text-gray-600 text-sm">Your Request has been send.</p>
                                   <%}else if (item.prouductStatus === 'Rejected'){%>
                                    <div class="flex items-center gap-2">
                                      <span class="w-2.5 h-2.5 rounded-full bg-gray-500"></span>
                                      <strong class="font-medium text-gray-600">Rejected</strong>
                                  </div>
                                  <p class="text-gray-600 text-sm">Your Request has been Rejected</p>
                                  <%}else { %>
                                      <div class="flex items-center gap-2">
                                          <span class="w-2.5 h-2.5 rounded-full bg-blue-500"></span>
                                          <strong class="font-medium text-blue-600">Status: <%= item.productStatus %></strong>
                                      </div>
                                      <p class="text-gray-600 text-sm">Your order status is <%=  item.productStatus  %>.</p>
                                  <% } %>
                              </div>

                              <a href="#" class="inline-flex items-center text-green-600 hover:text-green-700 text-sm font-medium">
                                  <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                                  </svg>
                                  Rate & Review Product
                                  
                              </a>
                            
                    
                         
                              <!-- Cancel and Return button -->

    
                              <% if(item.productStatus === 'Delivered') { %>
                                <div class="flex flex-wrap gap-3 pt-4">
                                  <button onclick="openModal('<%= order._id %>','<%= item.productId._id%>', 'return')" 
                                          class="px-4 py-2 text-sm font-medium text-white bg-red-700 rounded-md hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-700 focus:ring-offset-2 transition-colors">
                                    Return Order
                                  </button>
                                </div>
                              <% } else { %>
                                <%if(item.productStatus === 'Cancelled'||item.productStatus === 'Returned'||item.productStatus === 'Requested'||item.productStatus === 'Rejected'){ %>
                     <%  }else{ %>
                                <div class="flex flex-wrap gap-3 pt-4">
                                  <button onclick="openModal('<%= order._id %>','<%=item.productId._id%>', 'cancel')" 
                                          class="px-4 py-2 text-sm font-medium text-white bg-red-600 rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transition-colors">
                                    Cancel Order
                                  </button>
                                </div>

                          <%    } %>
                   
                              <% } %>

                              <% if(item.productStatus === 'Pending'){ %>
                                <% if(!order.paid ) { %>
                                  <div class="flex flex-col items-center p-4 bg-red-100 rounded-lg shadow-lg space-y-4">
                                    <p class="text-xl font-medium text-red-600">Oops! Payment Failed</p>
                                    <p class="text-gray-700 text-center">
                                      There was an issue with your payment. Please try again to complete your purchase.
                                    </p>
                                    <button 
                                      type="button" 
                                      onclick="retryPayment('<%=order._id%>')" 
                                      class="px-6 py-3 bg-green-600 hover:bg-green-700 text-white text-sm font-semibold rounded-md transition duration-200 ease-in-out transform hover:scale-105 focus:ring-2 focus:ring-green-500 focus:outline-none"
                                    >
                                      Pay Now
                                    </button>
                                  </div>
                                <% } %>
                              <% } %>

                     
                          </div>
                      </div>
                      <div id="cancelModal" class="hidden fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-50">
                        <div class="bg-white rounded-lg w-1/3 p-6">
                          <h2 class="text-lg font-semibold mb-4" id="modalTitle">Reason for Action</h2>
                          <form id="cancelForm">
                         
                              <input type="hidden" id="orderId" name="orderId" value="<%=order._id%>">
                              <input type="hidden" id="actionType" name="actionType" value="">
                              <input type="hidden" id="productId" value="<%=order.items.productId %>">
                        
                              <div class="mb-4">
                                <label for="reason" class="block text-gray-700">Enter Reason:</label>
                                <textarea id="reason" name="reason" class="w-full p-2 border border-gray-300 rounded-md" rows="3" required></textarea>
                              </div>
                              
                              <div class="flex justify-end gap-3">
                                <button type="button" onclick="closeModal()" class="px-4 py-2 bg-gray-500 text-white rounded-md">Cancel</button>
                                <button type="submit" class="px-4 py-2 bg-red-600 text-white rounded-md">Submit</button>
                              </div>
                       
                      
                          </form>
                        </div>
                      </div>
                  <% }) %>
              </div>
         
          <% }) %>
          <div class="mt-4 flex justify-center space-x-4">
            <% if (currentPage > 1) { %>
              <a href="?page=<%= currentPage - 1 %>&limit=10" class="bg-gray-200 text-black px-4 py-2 rounded hover:bg-gray-300">Previous</a>
            <% } %>
            
            <% for (let i = 1; i <= totalPage; i++) { %>
              <a href="?page=<%= i %>&limit=10" class="bg-gray-200 text-black px-4 py-2 rounded hover:bg-gray-300 <%= currentPage === i ? 'bg-gray-400' : '' %>">
                <%= i %>
              </a>
            <% } %>
            
            <% if (currentPage < totalPage) { %>
              <a href="?page=<%= currentPage + 1 %>&limit=10" class="bg-gray-200 text-black px-4 py-2 rounded hover:bg-gray-300">Next</a>
            <% } %>
          </div>
          <!-- No More Results Message -->
          <div class="text-center py-8 border-t border-gray-100">
              <p class="text-gray-500 font-medium">No More Results To Display</p>
          </div>
      </div>
  </div>
</div>
<!-- Modal for Reason Input -->



<!-- Modal -->

<div id="modalBackground" class="fixed inset-0 bg-black/50 backdrop-blur-sm transition-opacity z-40 hidden"></div>
<div id="orderModal" class="fixed inset-0 z-50 flex items-center justify-center p-4 hidden">
    <div class="relative w-full max-w-4xl bg-white rounded-xl shadow-2xl">
        <!-- Header -->
        <h2 class="text-2xl font-semibold text-gray-900 p-6 border-b border-gray-200">Order Details</h2>
        
        <!-- Main Content -->
        <div class="p-6">
            <!-- Two Column Grid -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                <!-- Left Column -->
                <div>
                    <div class="mb-4">
                        <p class="font-medium text-gray-900">Order ID: <span id="orderId" class="text-gray-700"></span></p>
                        <p class="font-medium text-gray-900">Order Date: <span id="orderDate" class="text-gray-700"></span></p>
                    </div>
                    
                    <div class="mt-6">
                        <h3 class="text-lg font-semibold text-gray-900 mb-2">Shipping Address</h3>
                        <p id="shippingAddress" class="text-gray-700"></p>
                    </div>
                </div>
                
                <!-- Right Column -->
                <div>
                    <div class="mb-4">
                        <h3 class="text-lg font-semibold text-gray-900 mb-2">Payment Method</h3>
                        <p id="paymentMethod" class="text-gray-700"></p>
                    </div>
                </div>
                <div>
              </div>
            </div>
            
            <!-- Items Table -->
            <div class="mt-8">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">Items Purchased</h3>
                <div class="overflow-x-auto">
                    <table class="w-full">
                        <thead>
                            <tr class="bg-gray-50">
                                <th class="px-6 py-3 text-left text-sm font-medium text-gray-700">Product</th>
                                <th class="px-6 py-3 text-left text-sm font-medium text-gray-700">Image</th>
                                <th class="px-6 py-3 text-left text-sm font-medium text-gray-700">Quantity</th>
                                <th class="px-6 py-3 text-left text-sm font-medium text-gray-700">Price</th>
                                <th class="px-6 py-3 text-left text-sm font-medium text-gray-700">Status</th>
                               
                              
                            </tr>
                        </thead>
                        <tbody id="itemsPurchased" class="divide-y divide-gray-200">
                            <!-- Items will be dynamically inserted here -->
                        </tbody>
                    </table>
                </div>
            </div>
            
            <!-- Total Price -->
            <div class="mt-6 flex justify-end">
                <p class="text-lg">
                    <span class="font-semibold text-gray-900">Total Price:</span>
                    <span class="ml-2">₹<span id="totalPrice" class="text-gray-900"></span></span>
                </p>
            </div>
            <button onclick="downloadInvoice()" class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition-colors duration-200">
              Download Invoice as PDF
          </button>
            <!-- Close Button -->
            <div class="mt-8 flex justify-end">
                <button onclick="closeModalOrderDetails()" class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg transition-colors duration-200">
                    Close
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Include SweetAlert2 Script -->
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>

  function viewOrder(orderId){
    console.log('hai');
    
    document.getElementById('modalBackground').classList.remove('hidden');
    document.getElementById('orderModal').classList.remove('hidden');

    fetch(`/orders/${orderId}`)
    .then(response => response.json())
    .then(order => {
 console.log(`order = ${order}`);
 
               // Populate basic order details
               document.getElementById('orderId').textContent = order.orderId || order._id;
            document.getElementById('orderDate').textContent = new Date(order.createdAt).toLocaleDateString();
            document.getElementById('shippingAddress').textContent = `
    ${order.address.contactName}
    ${order.address.street}, 
    ${order.address.city}, 
    ${order.address.state}, 
    ${order.address.country} - ${order.address.pincode}
`;
            document.getElementById('paymentMethod').textContent = order.paymentMethod;
            document.getElementById('totalPrice').textContent = order.totalPrice.toLocaleString();

            // Clear existing items
            const itemsTable = document.getElementById('itemsPurchased');
            itemsTable.innerHTML = '';

            // Add items with status
            order.items.forEach(item => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td class="px-6 py-4 text-sm text-gray-700">
                        ${item.productId.name}
                    </td>
                    <td class="px-6 py-4">
                        <img src="/uploads/${item.productImage}" alt="hai" 
                             class="w-16 h-16 object-cover rounded-md">
                    </td>
                    <td class="px-6 py-4 text-sm text-gray-700">
                        ${item.productCount}
                    </td>

                    
                    <td class="px-6 py-4 text-sm text-gray-700"> 
                        ₹${item.productDiscountPrice.toFixed(2) }*${item.productCount}
                    </td>
                    <td class="px-6 py-4">
                        <span class="px-3 py-1 text-xs font-medium rounded-full ${getStatusClass(item.productStatus)}">
                            ${item.productStatus}
                        </span>
                        ${getStatusTimeline(item.productStatus)}
                    </td>
             
            
                `;
                itemsTable.appendChild(row);
            });

            // Add order status section
            const orderStatusDiv = document.getElementById('orderStatus');
            if (orderStatusDiv) {
                orderStatusDiv.innerHTML = `
                    <div class="flex items-center space-x-2">
                        <span class="px-3 py-1 text-xs font-medium rounded-full ${getStatusClass(order.status)}">
                            ${order.status}
                        </span>
                        ${order.isCancel ? 
                            '<span class="text-red-600 text-sm">(Order Cancelled)</span>' 
                            : ''}
                    </div>
                `;
            }
    })
  }
  function getStatusClass(status) {
    const statusClasses = {
        'Pending': 'bg-yellow-100 text-yellow-800',
        'Confirmed': 'bg-green-100 text-green-800',
        'Shipped': 'bg-blue-100 text-blue-800',
        'Delivered': 'bg-purple-100 text-purple-800',
        'Cancelled': 'bg-red-100 text-red-800',
        'Returned': 'bg-gray-100 text-gray-800'
    };
    return statusClasses[status] || 'bg-gray-100 text-gray-800';
}

function getStatusTimeline(currentStatus) {
    const statuses = ['Pending', 'Confirmed', 'Shipped', 'Delivered'];
    const currentIndex = statuses.indexOf(currentStatus);
    
    if (currentStatus === 'Cancelled' || currentStatus === 'Returned') {
        return ''; // Don't show timeline for cancelled/returned items
    }

    return `
        <div class="mt-2">
            <div class="flex items-center space-x-2 text-xs">
                ${statuses.map((status, index) => `
                    <span class="${index <= currentIndex ? 'text-blue-600' : 'text-gray-400'}">
                        ${status}
                    </span>
                    ${index < statuses.length - 1 ? `
                        <span class="${index < currentIndex ? 'text-blue-600' : 'text-gray-300'}">→</span>
                    ` : ''}
                `).join('')}
            </div>
        </div>
    `;
}
  function closeModalOrderDetails() {
    document.getElementById('modalBackground').classList.add('hidden');
    document.getElementById('orderModal').classList.add('hidden');
}
// When the Cancel Order button is clicked, open the modal and set the order ID
function openModal(orderId, productId, action) {
  console.log(`productId = ${productId}`)
  console.log(`orderId = ${orderId}`)
  console.log(`action = ${action}`)

    document.getElementById('cancelModal').classList.remove('hidden');
    document.getElementById('orderId').value = orderId;
    document.getElementById('productId').value = productId; // Set productId
    document.getElementById('actionType').value = action;
    document.getElementById('modalTitle').innerText = `Reason for ${action.charAt(0).toUpperCase() + action.slice(1)} Order`;
}

  // Close Modal Function
  function closeModal  () {
    document.getElementById('cancelModal').classList.add('hidden');
    document.getElementById('reason').value = '';
  }

// JavaScript for submitting the cancel/return form with reason
document.getElementById('cancelForm').addEventListener('submit', function(e) {
  e.preventDefault();
  console.log('prevented')
  const orderId = document.getElementById('orderId').value;
  const productId = document.getElementById('productId').value;
  const actionType = document.getElementById('actionType').value;
  const reason = document.getElementById('reason').value;

  fetch(`/cancelOrder/${orderId}`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ action: actionType, reason: reason ,productId:productId})
  })
  .then(response => response.json())
  .then(data => {
    Swal.fire({
      icon: 'success',  // Change this to 'error' for error messages
      title: 'Success',
      text: data.message,  // Display success message from server
      confirmButtonText: 'OK',
    }).then(() => {
      closeModal();  // Close the modal
      // Optionally refresh the page or update the UI
      location.reload(); // Uncomment this if you want to refresh the page
    });
  })
  .catch(error => {
    console.error('Error:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'An error occurred while processing your request.',
      confirmButtonText: 'OK'
    });
  });
});

function downloadInvoice() {
    // Initialize jsPDF
    const { jsPDF } = window.jspdf;
    const pdf = new jsPDF();

    // Add title to the PDF
    pdf.setFontSize(16);
    pdf.text("Order Invoice", 10, 10);

    // Order Details
    pdf.setFontSize(12);
    pdf.text("Order ID: " + document.getElementById("orderId").innerText, 10, 20);
    pdf.text("Order Date: " + document.getElementById("orderDate").innerText, 10, 30);
    
    // Shipping Address
    pdf.text("Shipping Address:", 10, 40);
    pdf.text(document.getElementById("shippingAddress").innerText, 10, 50);

    // Payment Method
    pdf.text("Payment Method:", 10, 60);
    pdf.text(document.getElementById("paymentMethod").innerText, 10, 70);

    // Table Headers for Items
    let yPosition = 90;
    pdf.text("Items Purchased:", 10, yPosition);
    yPosition += 10;
    pdf.text("Product", 10, yPosition);
    pdf.text("Quantity", 80, yPosition);
    pdf.text("Price", 120, yPosition);
    yPosition += 10;

    // Table Data for Items Purchased
    const itemsPurchased = document.querySelectorAll("#itemsPurchased tr");
    itemsPurchased.forEach(row => {
        const columns = row.querySelectorAll("td");
        if (columns.length > 0) {
            pdf.text(columns[0].innerText, 10, yPosition); // Product Name
            pdf.text(columns[2].innerText, 80, yPosition); // Quantity
            pdf.text(columns[3].innerText, 120, yPosition); // Price
            yPosition += 10;
        }
    });

    // Total Price
    yPosition += 10;
    pdf.setFontSize(14);
    pdf.text("Total Price: ₹" + document.getElementById("totalPrice").innerText, 10, yPosition);

    // Save the PDF
    pdf.save("invoice.pdf");
}
function showError(message) {
  // You can customize this to show the error on the UI
  alert(message);
  console.error(message);
}
async function retryPayment(orderId){
  console.log(`orderId = ${orderId}`)
  try {
                    const res = await fetch('/retryRazorPay', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ orderId })
                    });

                    if (res.ok) {
                        const retryPaymentData = await res.json();
                        const options = {
                            key: 'rzp_test_KDYrLJHnu3O9Ip',
                            amount: retryPaymentData.amount,
                            currency: "INR",
                            name: "CoveHive",
                            order_id: retryPaymentData.razorpayOrderId.id,
                            handler: async function (response) {
                                try {
                                    const resData = {
                                        orderId,
                                        razorpayOrderId: response.razorpay_order_id,
                                        paymentId: response.razorpay_payment_id,
                                    };
                                    const payment = await fetch('/retryPayment', {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/json'
                                        },
                                        body: JSON.stringify(resData)
                                    });

                                    if (payment.ok) {
                                        const paymentData = await payment.json();
                                        window.location.href = "/conform-order";
                                    } else {
                                        const error = await payment.text();
                                        showError(error);
                                    }
                                } catch (error) {
                                    console.error(`Handler error: ${error}`);
                                }
                            },
                            prefill: {
                                name: retryPaymentData.address.contactName,
                                email: retryPaymentData.address.street,
                                contact: retryPaymentData.address.pincode
                            },
                            notes: {
                                address: retryPaymentData.address
                            },
                            theme: {
                                color: "#3399cc"
                            },
                            "modal": {
                                "ondismiss": function () {
                                    window.location.href = '/orders';
                                }
                            }
                        };
                        const rzp1 = new Razorpay(options);
                        rzp1.on('payment.failed', function (response) {
                            showError('Payment Failure');
                        });
                        rzp1.open();
                    } else {
                        const error = await res.text();
                        showError(error);
                    }
                } catch (error) {
                    console.error(`Error from retry payment fetch: ${error}`);
                }
}
</script>

<%- include('../layouts/userFooter.ejs') %>