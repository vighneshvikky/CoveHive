<%- include('../layouts/header.ejs') %>
<%- include('../layouts/sidebar.ejs') %>
  <div class="container mx-auto px-4 py-8 flex items-center justify-center min-h-screen"> 


    <form action="/admin/product/add" method="POST" enctype="multipart/form-data" class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4 w-1/2" id="productForm" >

       <!-- Product Name -->
       <div class="mb-4">
        <label class="block text-gray-700 text-sm font-bold mb-2" for="name">
          Product Name
        </label>
        <input 
          class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" 
          type="text" 
          id="name" 
          name="name"
          value="Apple" 
          >
          <span id="name-error" class="text-red-500 text-sm mt-1 hidden"></span>
      </div>

      <!-- Description -->
      <div class="mb-4">
        <label class="block text-gray-700 text-sm font-bold mb-2" for="description">
          Product Description
        </label>
       
        <textarea 
          class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" 
          id="description" 
          name="description"
          rows="3"></textarea>
          <span id="description-error" class="text-red-500 text-sm mt-1 hidden"></span>
      </div>

      <!-- Price -->
      <div class="mb-4">
        <label class="block text-gray-700 text-sm font-bold mb-2" for="price">
          Price
        </label>
        <input 
          class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" 
          type="number" 
          id="price" 
          name="price" 
          value="2000"
          >
          <span id="price-error" class="text-red-500 text-sm mt-1 hidden"></span>
      </div>

      
      <!-- discount -->


      <div class="mb-4">
        <label class="block text-gray-700 text-sm font-bold mb-2" for="discount">
          discount
        </label>
        <input 
          class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" 
          type="text" 
          id="discount" 
          name="discount" 
          value="50"
          >
          <span id="discount-error" class="text-red-500 text-sm mt-1 hidden"></span>
      </div>
      <!-- Stock -->
      <div class="mb-4">
        <label class="block text-gray-700 text-sm font-bold mb-2" for="stock">
          Stock
        </label>
        <input 
          class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" 
          type="number" 
          id="stock" 
          name="stock"
          value="5" 
          >
          <span id="stock-error" class="text-red-500 text-sm mt-1 hidden"></span>
      </div>

      <div class="mb-4">
        <label class="block text-gray-700 text-sm font-bold mb-2" for="category">
            Category  
        </label>
        <select 
            id="category" 
            name="category" 
            class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" 
              >
            <option value="">Select a Category</option>
            <% categories.forEach(category => { %>
                <option value="<%= category._id %>">
                    <%= category.name %>
                </option>
            <% }); %>
        </select>
        <span id="category-error" class="text-red-500 text-sm mt-1 hidden"></span>
      </div>
    
      <!-- Subcategory -->
      <div class="mb-4">
        <label class="block text-gray-700 text-sm font-bold mb-2" for="subcategory">
          Subcategory
        </label>
        <input 
          class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" 
          type="text" 
          id="subcategory" 
          name="subcategory"
          value="Apple 15 series" 
          >
          <span id="subcategory-error" class="text-red-500 text-sm mt-1 hidden"></span>
      </div>
      <!-- Compatible Devices -->
      <div class="mb-4">
        <label class="block text-gray-700 text-sm font-bold mb-2" for="compatibleDevices">
          Compatible Devices (Comma separated)
        </label>
        <input 
          class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" 
          type="text" 
          id="compatibleDevices" 
          value="iphone 15 Pro"
          name="compatibleDevices" 
          placeholder="iPhone 15 Pro, iPhone 15 Pro Max"
          >
          <span id="compatibleDevices-error" class="text-red-500 text-sm mt-1 hidden"></span>
      </div>

      <div class="mb-4">
        <label class="block text-gray-700 text-sm font-bold mb-2" for="image">Product Images</label>
        <input class="shadow appearance-none border rounded w-full py-2 px-3 text-grey-700 leading-tight focus:outline-none focus:shadow-outline" type="file" id="imageInput" name="images" accept="image/*" multiple>
        <span id="image-error" class="text-red-500 text-sm mt-1 hidden"></span>
      </div>
    
      
       <div class="cropper-container max-w-lg mx-auto p-4 bg-gray-100 border rounded-lg">
        <div id="imagePreviews" class="flex flex-wrap justify-center gap-4"> 
           <!-- Existing image previews will be inserted here by JavaScript  -->
         </div>
      </div>
    
      <!-- Crop and Cancel Buttons -->
      <div class="flex justify-between mt-4">
        <button type="button" id="cropButton" style="display: none;" class="bg-purple-600 text-white py-2 px-4 rounded">Crop and Update</button>
        <button type="button" id="cancelButton" style="display: none;" class="bg-gray-400 text-white py-2 px-4 rounded">Cancel</button>
      </div>
    
      <!-- Submit Button -->
      <button type="submit" id="submitButton" class="bg-purple-600 text-white py-2 px-4 rounded mt-4">Add Product</button>
    
      <!-- Back to Products Button -->
     
    </form>
    <!-- Added ID here -->
            </div>
          
            <div id="productModal" class="fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center hidden">
              <div class="bg-white p-6 rounded-lg shadow-md w-full max-w-md">
                <p class="text-center text-green-500 mb-4">Add Product Successfully.</p>
                <button id="closeModal" class="bg-blue-700 text-white px-4 py-2 rounded">Close</button>
              </div>
            </div>
            
            <!-- Modal -->
          
            <div id="confirmation-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50  items-center justify-center hidden">
              <div class="bg-white p-6 rounded-lg shadow-lg w-1/3">
                  <h2 class="text-lg font-bold mb-4">Confirm Action</h2>
                  <p id="modal-message" class="mb-6"></p>
                  <div class="flex justify-end">
                      <button id="cancel-btn" class="bg-gray-500 text-white px-4 py-2 rounded mr-2" onclick="closeModal()">Cancel</button>
                      <form id="confirm-form" action="" method="POST" style="display: inline;">
                          <input type="hidden" name="is_blocked" id="isBlocked" value="" />
                          <button type="submit" class="bg-red-500 text-white px-4 py-2 rounded">Confirm</button>
                      </form>
                  </div>
              </div>
          </div>
       
          <!-- Modal -->
          <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script>
    document.addEventListener('DOMContentLoaded', function() {
      const imageInput = document.getElementById('imageInput');
      const imagePreviewsContainer = document.getElementById('imagePreviews');
      const cropButton = document.getElementById('cropButton');
      const cancelButton = document.getElementById('cancelButton');
      const productForm = document.querySelector('form');
      let cropperInstances = [];
      const nameInput = document.getElementById('name');
  const descriptionInput = document.getElementById('description');
  const priceInput = document.getElementById('price');
  const discountInput = document.getElementById('discount');
  const stockInput = document.getElementById('stock');
  const categorySelect = document.getElementById('category');
  const subcategoryInput = document.getElementById('subcategory');
  const compatibleDevicesInput = document.getElementById('compatibleDevices');
  const submitButton = document.querySelector('button[type="submit"]');

  // Form fields
  const fields = [
    { id: 'name', validate: (value) => value.trim().length > 0, errorMsg: 'Product name is required.' },
    { id: 'description', validate: (value) => value.trim().length > 10, errorMsg: 'Description must be longer than 10 characters.' },
    { id: 'price', validate: (value) => !isNaN(value) && parseFloat(value) > 0, errorMsg: 'Please enter a valid price.' },
    { id: 'discount', validate: (value) => {
        const discount = parseFloat(value);
        return !isNaN(discount) && discount >= 0 && discount <= 100;
      }, errorMsg: 'Please enter a discount between 0 and 100.' },
    { id: 'stock', validate: (value) => !isNaN(value) && parseInt(value) >= 0, errorMsg: 'Stock must be a non-negative number.' },
    { id: 'category', validate: (value) => value !== "", errorMsg: 'Please select a category.' },
    { id: 'subcategory', validate: (value) => value.trim().length > 0, errorMsg: 'Subcategory is required.' },
    { id: 'compatibleDevices', validate: (value) => value.trim().length > 0, errorMsg: 'Please enter compatible devices.' }
  ];

  // Create error message spans
  fields.forEach(field => {
    const input = document.getElementById(field.id);
    const errorSpan = document.createElement('span');
    errorSpan.id = `${field.id}-error`;
    errorSpan.className = 'text-red-500 text-sm mt-1 hidden';
    input.parentNode.insertBefore(errorSpan, input.nextSibling);
  });

  // Validation function
  function validateField(field) {
    const input = document.getElementById(field.id);
    const errorSpan = document.getElementById(`${field.id}-error`);
    const isValid = field.validate(input.value);
    
    if (isValid) {
      errorSpan.textContent = '';
      errorSpan.classList.add('hidden');
    } else {
      errorSpan.textContent = field.errorMsg;
      errorSpan.classList.remove('hidden');
    }
    
    return isValid;
  }

  // Apply validation to form fields
  fields.forEach(field => {
    const input = document.getElementById(field.id);
    input.addEventListener('input', () => {
      validateField(field);
      checkFormValidity();
    });
  });

  // Image validation
  function validateImages() {
    const imageCount = imageInput.files.length + document.querySelectorAll('.preview-image').length;
    const errorSpan = document.getElementById('image-error') || document.createElement('span');
    errorSpan.id = 'image-error';
    errorSpan.className = 'text-red-500 text-sm mt-1';
    imageInput.parentNode.appendChild(errorSpan);

    if (imageCount < 3) {
      errorSpan.textContent = 'Please upload at least 3 images.';
      errorSpan.classList.remove('hidden');
      return false;
    } else {
      errorSpan.textContent = '';
      errorSpan.classList.add('hidden');
      return true;
    }
  }

  // Check overall form validity
  function checkFormValidity() {
    const isValid = fields.every(field => validateField(field)) && validateImages();
    submitButton.disabled = !isValid;
  }
  function addProduct() {
      

   
        // Show SweetAlert success popup
        Swal.fire({
          title: 'Success!',
          text: 'Product has been added.',
          icon: 'success',
          confirmButtonText: 'OK'
        });

      
    }

// Crop and update button


  // Modify the form submission
  productForm.addEventListener('submit', function(event) {
    event.preventDefault();
    if (fields.every(field => validateField(field)) && validateImages()) {
      this.submit();
    } else {
      alert('Please fill out all required fields correctly and upload at least 3 images.');
    }
   
  });

  // Initial form validity check
  checkFormValidity();

  // Image input change event
  imageInput.addEventListener('change', function() {
    validateImages();
    checkFormValidity();
  });

  
  
      let existingImages = [];
      try {
        existingImages = JSON.parse(imagePreviewsContainer.dataset.existingImages);
        if (!Array.isArray(existingImages)) {
          existingImages = [];
        } 
        console.log('Existing images:', existingImages); 
      } catch (error) {
        console.error('Error parsing existing images:', error);
      }
    
      function createImagePreview(src, isExisting = false) {
        const previewContainer = document.createElement('div');
        previewContainer.className = 'relative'
    
        const imgElement = document.createElement('img');
        imgElement.src = src;
        imgElement.classList.add('preview-image', 'w-32', 'h-32', 'object-cover', 'rounded-lg');  
        previewContainer.appendChild(imgElement);
    
        imgElement.onerror = function() {
        console.error('Failed to load image:', src);
        previewContainer.innerHTML = '<p class="text-red-500">Failed to load image</p>';
      };
    
       



 const removeButton = document.createElement('button');
 removeButton.className = 'relative top-2 right-1 bg-red-500 text-white rounded-full p-1';

           // removeButton.className = 'absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1';
            removeButton.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>';
            removeButton.onclick = function() {
              previewContainer.remove();
              cropperInstances = cropperInstances.filter(instance => instance.image !== imgElement);
            };
            previewContainer.appendChild(removeButton);




        removeButton.onclick = function() {
          previewContainer.remove();
          if (!isExisting) {
            cropperInstances = cropperInstances.filter(instance => instance.image !== imgElement);
          }
        };
        previewContainer.appendChild(removeButton);
    
        imagePreviewsContainer.appendChild(previewContainer);
        previewContainer.appendChild(imgElement);
    
    // ... rest of the function ...
    
       imagePreviewsContainer.appendChild(previewContainer);
        if (!isExisting) {
          const cropper = new Cropper(imgElement, {
            aspectRatio: 1,
            viewMode: 1,
            autoCropArea: 1,
            responsive: true,
            scalable: true,
            zoomable: true,
            rotatable: true,
            minCropBoxWidth: 50,
            minCropBoxHeight: 50,
          });
          cropperInstances.push({ cropper, image: imgElement });
        }
      }
    
      // Display existing images
      existingImages.forEach(imagePath => {
        createImagePreview(imagePath, true);
      });
    
      imageInput.addEventListener('change', function (event) {
        const files = event.target.files;
    
        for (let i = 0; i < files.length; i++) {
          const reader = new FileReader();
          reader.onload = function (e) {
            createImagePreview(e.target.result);
          };
          reader.readAsDataURL(files[i]);
        }
    
        cropButton.style.display = 'inline-block';
        cancelButton.style.display = 'inline-block';
      });
     function sucessproduct (){
   Swal.fire({
          title: 'Success!',
          text: 'Product has been added.',
          icon: 'success',
          confirmButtonText: 'OK'
        });
     }
      cropButton.addEventListener('click', function () {
        const croppedFiles = [];
        const promises = cropperInstances.map((instance, index) => {
          return new Promise((resolve) => {
            const canvas = instance.cropper.getCroppedCanvas({
              width: 200,
              height: 200,
              imageSmoothingEnabled: true,
              imageSmoothingQuality: 'high'
             
            });
    
            canvas.toBlob(function (blob) {
              const file = new File([blob], `croppedImage-${index}.png`, { type: 'image/png' });
              croppedFiles.push(file);
              resolve();
            }, 'image/png');
          });
        });
    
        Promise.all(promises).then(() => {
          const dataTransfer = new DataTransfer();
          croppedFiles.forEach(file => {
            dataTransfer.items.add(file);
          });
    
          imageInput.files = dataTransfer.files;
    
          cropButton.style.display = 'none';
          cancelButton.style.display = 'none';
         productForm.submit();
         sucessproduct()
        });
      });
       document.getElementById('productForm').addEventListener('submit',function(event){
        event.preventDefault();
        addProduct()
        document.getElementById('productForm').reset();
       })
      cancelButton.addEventListener('click', function () {
        imageInput.value = '';
        imagePreviewsContainer.innerHTML = '';
        cropButton.style.display = 'none';
        cancelButton.style.display = 'none';
        cropperInstances.forEach(instance => instance.cropper.destroy());
        cropperInstances = [];
    
        // Restore existing image previews
        existingImages.forEach(imagePath => {
          createImagePreview(imagePath, true);
        });
      });
    });
    </script>
    <%- include('../layouts/footer.ejs') %>