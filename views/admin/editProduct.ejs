<%- include('../layouts/header.ejs') %>
<%- include('../layouts/sidebar.ejs') %>  
<form action="/admin/products/edit/<%= product._id %>" method="POST" enctype="multipart/form-data" class="max-w-4xl mx-auto bg-white rounded-lg shadow-lg p-8 space-y-6" id="formSubmit">
  <!-- Product Name -->
  <div class="space-y-2">
    <label class="text-sm font-medium text-gray-700" for="name">
      Product Name
    </label>
    <input 
      class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors" 
      type="text" 
      id="name" 
      name="name"
      value="<%= product.name %>"
    >
    <span id="name-error" class="text-red-500 text-sm"></span>
  </div>

  <!-- Description -->
  <div class="space-y-2">
    <label class="text-sm font-medium text-gray-700" for="description">
      Description
    </label>
    <textarea 
      id="description" 
      name="description" 
      class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors" 
      rows="5" 
      required
    ><%= product.description %></textarea>
    <span id="description-error" class="text-red-500 text-sm"></span>
  </div>

  <!-- Price and Discount Grid -->
  <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
    <div class="space-y-2">
      <label class="text-sm font-medium text-gray-700" for="price">
        Price
      </label>
      <input 
        class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors" 
        type="number" 
        id="price" 
        name="price" 
        value="<%=product.price%>"
      >
      <span id="price-error" class="text-red-500 text-sm"></span>
    </div>

    <div class="space-y-2">
      <label class="text-sm font-medium text-gray-700" for="discount">
        Discount
      </label>
      <input 
        class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors" 
        type="text" 
        id="discount" 
        name="discount" 
        value='<%=product.discount%>'
      >
      <span id="discount-error" class="text-red-500 text-sm"></span>
    </div>
  </div>

  <!-- Stock and Category Grid -->
  <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
    <div class="space-y-2">
      <label class="text-sm font-medium text-gray-700" for="stock">
        Stock
      </label>
      <input 
        class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors" 
        type="number" 
        id="stock" 
        name="stock"
        value="<%= product.stock%>" 
      >
      <span id="stock-error" class="text-red-500 text-sm"></span>
    </div>

    <div class="space-y-2">
      <label class="text-sm font-medium text-gray-700" for="category">
        Category
      </label>
      <select 
        id="category" 
        name="category" 
        class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors" 
        required
      >
        <% categories.forEach(function(category) { %>
          <option value="<%= category._id %>" <%= category._id.equals(product.category._id) ? 'selected' : '' %>>
            <%= category.name %>
          </option>
        <% }); %>
      </select>
      <span id="category-error" class="text-red-500 text-sm"></span>
    </div>
  </div>

  <!-- Subcategory and Compatible Devices -->
  <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
    <div class="space-y-2">
      <label class="text-sm font-medium text-gray-700" for="subcategory">
        Subcategory
      </label>
      <input 
        class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors" 
        type="text" 
        id="subcategory" 
        name="subcategory"
        value="<%=product.subcategory%>" 
      >
      <span id="subcategory-error" class="text-red-500 text-sm"></span>
    </div>

    <div class="space-y-2">
      <label class="text-sm font-medium text-gray-700" for="compatibleDevices">
        Compatible Devices
      </label>
      <input 
        class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors" 
        type="text" 
        id="compatibleDevices" 
        name="compatibleDevices"
        value="<%=product.compatibleDevices%>"
        placeholder="iPhone 15 Pro, iPhone 15 Pro Max"
      >
      <span id="compatibleDevices-error" class="text-red-500 text-sm"></span>
    </div>
  </div>

  <!-- Image Upload -->
  <div class="space-y-2">
    <label class="text-sm font-medium text-gray-700" for="image">
      Product Images
    </label>
    <input 
      class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors" 
      type="file" 
      id="imageInput" 
      name="images" 
      accept="image/*" 
      multiple
    >
    <span id="image-error" class="text-red-500 text-sm"></span>
  </div>

  <!-- Existing Images Preview -->
  <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4">
    <% product.image.forEach((img, index) => { %>
      <div class="relative group">
        <img 
          src="/uploads/<%= img %>" 
          alt="<%= product.name %>" 
          class="w-full h-32 object-cover rounded-lg shadow-md thumbnail"
        />
        <button 
          type="button" 
          class="absolute top-2 right-2 bg-red-500 text-white text-xs px-2 py-1 rounded-full opacity-0 group-hover:opacity-100 transition-all duration-200 ease-in-out hover:bg-red-600"
          onclick="removeImage('<%= img %>', '<%= product._id %>')"
        >
          Remove
        </button>
      </div>
    <% }) %>
  </div>

  <!-- Image Preview and Crop Section -->
  <div class="bg-gray-50 rounded-lg p-6">
    <div 
      id="imagePreviews" 
      class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4"
      data-existing-images='<%= JSON.stringify(product.images || []) %>'
    ></div>
  </div>

  <!-- Crop and Cancel Buttons -->
  <div class="flex gap-4">
    <button 
      type="button" 
      id="cropButton" 
      style="display: none;" 
      class="px-6 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition-colors"
    >
      Crop and Update
    </button>
    <button 
      type="button" 
      id="cancelButton" 
      style="display: none;" 
      class="px-6 py-2 bg-gray-400 text-white rounded-lg hover:bg-gray-500 focus:ring-2 focus:ring-gray-400 focus:ring-offset-2 transition-colors"
    >
      Cancel
    </button>
  </div>

  <!-- Action Buttons -->
  <div class="flex flex-col sm:flex-row gap-4 pt-6">
    <button 
      type="submit" 
      class="w-full sm:w-auto px-6 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition-colors"
    >
      Edit Product
    </button>
    <a 
      href="/admin/products" 
      class="w-full sm:w-auto px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition-colors text-center"
    >
      Back to Products
    </a>
  </div>
</form>
<!-- Added ID here -->
        </div>
      
        <div id="productModal" class="fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center hidden">
          <div class="bg-white p-6 rounded-lg shadow-md w-full max-w-md">
            <p class="text-center text-green-500 mb-4">Add Product Successfully.</p>
            <button id="closeModal" class="bg-blue-700 text-white px-4 py-2 rounded">Close</button>
          </div>
        </div>
        
        <!-- Modal -->
      
        <div id="confirmation-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50  items-center justify-center hidden">
          <div class="bg-white p-6 rounded-lg shadow-lg w-1/3">
              <h2 class="text-lg font-bold mb-4">Confirm Action</h2>
              <p id="modal-message" class="mb-6"></p>
              <div class="flex justify-end">
                  <button id="cancel-btn" class="bg-gray-500 text-white px-4 py-2 rounded mr-2" onclick="closeModal()">Cancel</button>
                  <form id="confirm-form" action="" method="POST" style="display: inline;">
                      <input type="hidden" name="is_blocked" id="isBlocked" value="" />
                      <button type="submit" class="bg-red-500 text-white px-4 py-2 rounded">Confirm</button>
                  </form>
              </div>
          </div>
      </div>
   
      <!-- Modal -->
      <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
  const imageInput = document.getElementById('imageInput');
  const imagePreviewsContainer = document.getElementById('imagePreviews');
  const cropButton = document.getElementById('cropButton');
  const cancelButton = document.getElementById('cancelButton');
  const productForm = document.querySelector('form');
  let cropperInstances = [];


  document.getElementById('formSubmit').addEventListener('submit',function(event){
        event.preventDefault();
        console.log('event prevented')
        const nameInput = document.getElementById('name').value
  const descriptionInput = document.getElementById('description').value
  const priceInput = document.getElementById('price').value
  const discountInput = document.getElementById('discount').value
  const stockInput = document.getElementById('stock').value
  const categorySelect = document.getElementById('category').value
  const subcategoryInput = document.getElementById('subcategory').value
  const compatibleDevicesInput = document.getElementById('compatibleDevices').value

const err_name = document.getElementById('name-error');
const err_description = document.getElementById('description-error')
const err_price = document.getElementById('price-error')
const err_discount = document.getElementById('discount-error')
const err_stock = document.getElementById('stock-error')
const err_category = document.getElementById('category-error')
const err_subcategory = document.getElementById('subcategory-error')
const err_compatable = document.getElementById('compatibleDevices-error')
const err_img = document.getElementById('image-error')
err_name.textContent = "";
err_description.textContent = "";
err_price.textContent = "";
err_stock.textContent = "";
err_category.textContent = "";
err_discount.textContent=""
err_subcategory.textContent = "";
 err_compatable.textContent = "";
 err_img.textContent="";

let valid = true;
validName = /^[A-Z][a-zA-Z0-9]*[a-zA-Z0-9\s]*$/;
validDis = /^.{10,}$/
validPrice = /^(?!0$|-[0-9]+$)[0-9]+$/
validStock = /^(0|[1-9][0-9]*)$/
validDiscount = /\b(100|[1-9]?[0-9])\b/
if(!validName.test(nameInput)){
  err_name.textContent="Enter a valid name"
  valid=false;
}
if(!validDis.test(descriptionInput)){
err_description.textContent="Description should be atlead have minimum length of 10 characters "
  valid=false;
}
if(!validPrice.test(priceInput)){
  err_price.textContent="Enter a valid Price"
  valid=false;
}
if(!validDiscount.test(discountInput)){
  err_discount.textContent="Discount should be between 0 and 100"
  valid=false;
}
if(!validStock.test(stockInput)){
  err_stock.textContent="Enter a valid Stock"
  valid=false;
}
if(!categorySelect){
  err_category.textContent="Enter the Category"
  valid=false;
}
if(!validName.test(subcategoryInput)){
  err_subcategory.textContent="Enter a valid subcategory"
  valid=false;
}
if(!validName.test(compatibleDevicesInput)){
  err_compatable.textContent="Enter a valid subcategory"
  valid=false;
}
// if(imageInput.files.length!==3){
//   err_img.textContent="Enter 3 Images"
//   valid=false;
// }

if(valid){
  console.log('valid sucess')
document.getElementById('formSubmit').submit();

}



       })
    
  // Retrieve existing images from data attribute
  let existingImages = [];
  try {
    existingImages = JSON.parse(imagePreviewsContainer.dataset.existingImages);
    if (!Array.isArray(existingImages)) {
      existingImages = [];
    } 
    console.log('Existing images:', existingImages); 
  } catch (error) {
    console.error('Error parsing existing images:', error);
  }

  function createImagePreview(src, isExisting = false) {
    const previewContainer = document.createElement('div');
    previewContainer.className = 'relative';

    const imgElement = document.createElement('img');
    imgElement.src = src;
    imgElement.classList.add('preview-image', 'w-32', 'h-32', 'object-cover', 'rounded-lg');  
    previewContainer.appendChild(imgElement);

    imgElement.onerror = function() {
    console.error('Failed to load image:', src);
    previewContainer.innerHTML = '<p class="text-red-500">Failed to load image</p>';
  };

    const removeButton = document.createElement('button');
    removeButton.className = 'absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1';
    removeButton.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>';
    removeButton.onclick = function() {
      previewContainer.remove();
      if (!isExisting) {
        cropperInstances = cropperInstances.filter(instance => instance.image !== imgElement);
      }
    };
    previewContainer.appendChild(removeButton);

    imagePreviewsContainer.appendChild(previewContainer);
    previewContainer.appendChild(imgElement);

// ... rest of the function ...

   imagePreviewsContainer.appendChild(previewContainer);
    if (!isExisting) {
      const cropper = new Cropper(imgElement, {
        aspectRatio: 1,
        viewMode: 1,
        autoCropArea: 1,
        responsive: true,
        scalable: true,
        zoomable: true,
        rotatable: true,
        minCropBoxWidth: 50,
        minCropBoxHeight: 50,
      });
      cropperInstances.push({ cropper, image: imgElement });
    }
  }

  // Display existing images
  existingImages.forEach(imagePath => {
    createImagePreview(imagePath, true);
  });

  imageInput.addEventListener('change', function (event) {
    const files = event.target.files;

    for (let i = 0; i < files.length; i++) {
      const reader = new FileReader();
      reader.onload = function (e) {
        createImagePreview(e.target.result);
      };
      reader.readAsDataURL(files[i]);
    }

    cropButton.style.display = 'inline-block';
    cancelButton.style.display = 'inline-block';
  });

  cropButton.addEventListener('click', function () {
    const croppedFiles = [];
    const promises = cropperInstances.map((instance, index) => {
      return new Promise((resolve) => {
        const canvas = instance.cropper.getCroppedCanvas({
          width: 200,
          height: 200,
          imageSmoothingEnabled: true,
          imageSmoothingQuality: 'high'
        });

        canvas.toBlob(function (blob) {
          const file = new File([blob], `croppedImage-${index}.png`, { type: 'image/png' });
          croppedFiles.push(file);
          resolve();
        }, 'image/png');
      });
    });

    Promise.all(promises).then(() => {
      const dataTransfer = new DataTransfer();
      croppedFiles.forEach(file => {
        dataTransfer.items.add(file);
      });

      imageInput.files = dataTransfer.files;

      cropButton.style.display = 'none';
      cancelButton.style.display = 'none';
     productForm.submit();
    });
  });

  cancelButton.addEventListener('click', function () {
    imageInput.value = '';
    imagePreviewsContainer.innerHTML = '';
    cropButton.style.display = 'none';
    cancelButton.style.display = 'none';
    cropperInstances.forEach(instance => instance.cropper.destroy());
    cropperInstances = [];

    // Restore existing image previews
    existingImages.forEach(imagePath => {
      createImagePreview(imagePath, true);
    });
  });
});
function removeImage(image, productId) {
  console.log(`image is ${image}`);
  console.log(`product is ${productId}`);
  
  
    if (confirm('Are you sure you want to remove this image?')) {
      fetch(`/admin/product/remove-image/${productId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ image, productId }),
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          // Remove the image from the DOM or refresh the page
          location.reload(); // You can also remove the image without refreshing the page
        } else {
          alert('Failed to remove the image');
        }
      })
      .catch(error => {
        console.error('Error:', error);
      });
    }
  }

</script>
<%- include('../layouts/footer.ejs') %>