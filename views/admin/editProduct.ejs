<%- include('../layouts/header.ejs') %>

<form action="/admin/products/edit/<%= product._id %>" method="POST" enctype="multipart/form-data" class="bg-white p-8 rounded-md shadow-md">

  <!-- Product Name -->
  <div class="mb-4">
      <label for="name" class="block text-gray-700">Product Name</label>
      <input type="text" id="name" name="name" value="<%= product.name %>" class="w-full p-2 border border-gray-300 rounded-md" required>
  </div>

  <!-- Product Description -->
  <div class="mb-4">
      <label for="description" class="block text-gray-700">Description</label>
      <textarea id="description" name="description" class="w-full p-2 border border-gray-300 rounded-md" rows="5" required><%= product.description %></textarea>
  </div>

  <!-- Product Price -->
  <div class="mb-4">
      <label for="price" class="block text-gray-700">Price</label>
      <input type="number" id="price" name="price" value="<%= product.price %>" class="w-full p-2 border border-gray-300 rounded-md" required>
  </div>
  <div class="mb-4">
    <label class="block text-gray-700 text-sm font-bold mb-2" for="discount">
      discount
    </label>
    <input 
      class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" 
      type="text" 
      id="discount" 
      name="discount" 
      value="50"
      required>
  </div>
  <div class="mb-4">
    <label class="block text-gray-700 text-sm font-bold mb-2" for="stock">
      Stock
    </label>
    <input 
      class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" 
      type="number" 
      id="stock" 
      name="stock"
      value="5" 
      required>
  </div>
  <!-- Product Category -->
  <div class="mb-4">
      <label for="category" class="block text-gray-700">Category</label>
      <select id="category" name="category" class="w-full p-2 border border-gray-300 rounded-md" required>
          <% categories.forEach(function(category) { %>
              <option value="<%= category._id %>" <%= category._id.equals(product.category._id) ? 'selected' : '' %> >
                  <%= category.name %>
              </option>
          <% }); %>
      </select>
  </div>

  <div class="mb-4">
    <label class="block text-gray-700 text-sm font-bold mb-2" for="image">Product Images</label>
    <input class="shadow appearance-none border rounded w-full py-2 px-3 text-grey-700 leading-tight focus:outline-none focus:shadow-outline" type="file" id="imageInput" name="images" accept="image/*" multiple>
  </div>

  <!-- Image Preview and Crop Section -->
  <div class="cropper-container max-w-lg mx-auto p-4 bg-gray-100 border rounded-lg">
    <div id="imagePreviews" class="flex flex-wrap justify-center gap-4" data-existing-images='<%= JSON.stringify(product.images || []) %>'>
      <!-- Existing image previews will be inserted here by JavaScript -->
    </div>
  </div>

  <!-- Crop and Cancel Buttons -->
  <div class="flex justify-between mt-4">
    <button type="button" id="cropButton" style="display: none;" class="bg-purple-600 text-white py-2 px-4 rounded">Crop and Update</button>
    <button type="button" id="cancelButton" style="display: none;" class="bg-gray-400 text-white py-2 px-4 rounded">Cancel</button>
  </div>

  <!-- Submit Button -->
  <button type="submit" class="bg-purple-600 text-white py-2 px-4 rounded">Edit Product</button>

  <!-- Back to Products Button -->
  <a href="/admin/products" class="bg-green-600 text-white py-2 px-4 rounded">Back to Product</a>
</form>
<!-- Added ID here -->
        </div>
      
        <div id="productModal" class="fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center hidden">
          <div class="bg-white p-6 rounded-lg shadow-md w-full max-w-md">
            <p class="text-center text-green-500 mb-4">Add Product Successfully.</p>
            <button id="closeModal" class="bg-blue-700 text-white px-4 py-2 rounded">Close</button>
          </div>
        </div>
        
        <!-- Modal -->
      
        <div id="confirmation-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50  items-center justify-center hidden">
          <div class="bg-white p-6 rounded-lg shadow-lg w-1/3">
              <h2 class="text-lg font-bold mb-4">Confirm Action</h2>
              <p id="modal-message" class="mb-6"></p>
              <div class="flex justify-end">
                  <button id="cancel-btn" class="bg-gray-500 text-white px-4 py-2 rounded mr-2" onclick="closeModal()">Cancel</button>
                  <form id="confirm-form" action="" method="POST" style="display: inline;">
                      <input type="hidden" name="is_blocked" id="isBlocked" value="" />
                      <button type="submit" class="bg-red-500 text-white px-4 py-2 rounded">Confirm</button>
                  </form>
              </div>
          </div>
      </div>
   
      <!-- Modal -->
      <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
  const imageInput = document.getElementById('imageInput');
  const imagePreviewsContainer = document.getElementById('imagePreviews');
  const cropButton = document.getElementById('cropButton');
  const cancelButton = document.getElementById('cancelButton');
  const productForm = document.querySelector('form');
  let cropperInstances = [];

  // Retrieve existing images from data attribute
  let existingImages = [];
  try {
    existingImages = JSON.parse(imagePreviewsContainer.dataset.existingImages);
    if (!Array.isArray(existingImages)) {
      existingImages = [];
    } 
    console.log('Existing images:', existingImages); 
  } catch (error) {
    console.error('Error parsing existing images:', error);
  }

  function createImagePreview(src, isExisting = false) {
    const previewContainer = document.createElement('div');
    previewContainer.className = 'relative';

    const imgElement = document.createElement('img');
    imgElement.src = src;
    imgElement.classList.add('preview-image', 'w-32', 'h-32', 'object-cover', 'rounded-lg');  
    previewContainer.appendChild(imgElement);

    imgElement.onerror = function() {
    console.error('Failed to load image:', src);
    previewContainer.innerHTML = '<p class="text-red-500">Failed to load image</p>';
  };

    const removeButton = document.createElement('button');
    removeButton.className = 'absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1';
    removeButton.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>';
    removeButton.onclick = function() {
      previewContainer.remove();
      if (!isExisting) {
        cropperInstances = cropperInstances.filter(instance => instance.image !== imgElement);
      }
    };
    previewContainer.appendChild(removeButton);

    imagePreviewsContainer.appendChild(previewContainer);
    previewContainer.appendChild(imgElement);

// ... rest of the function ...

   imagePreviewsContainer.appendChild(previewContainer);
    if (!isExisting) {
      const cropper = new Cropper(imgElement, {
        aspectRatio: 1,
        viewMode: 1,
        autoCropArea: 1,
        responsive: true,
        scalable: true,
        zoomable: true,
        rotatable: true,
        minCropBoxWidth: 50,
        minCropBoxHeight: 50,
      });
      cropperInstances.push({ cropper, image: imgElement });
    }
  }

  // Display existing images
  existingImages.forEach(imagePath => {
    createImagePreview(imagePath, true);
  });

  imageInput.addEventListener('change', function (event) {
    const files = event.target.files;

    for (let i = 0; i < files.length; i++) {
      const reader = new FileReader();
      reader.onload = function (e) {
        createImagePreview(e.target.result);
      };
      reader.readAsDataURL(files[i]);
    }

    cropButton.style.display = 'inline-block';
    cancelButton.style.display = 'inline-block';
  });

  cropButton.addEventListener('click', function () {
    const croppedFiles = [];
    const promises = cropperInstances.map((instance, index) => {
      return new Promise((resolve) => {
        const canvas = instance.cropper.getCroppedCanvas({
          width: 200,
          height: 200,
          imageSmoothingEnabled: true,
          imageSmoothingQuality: 'high'
        });

        canvas.toBlob(function (blob) {
          const file = new File([blob], `croppedImage-${index}.png`, { type: 'image/png' });
          croppedFiles.push(file);
          resolve();
        }, 'image/png');
      });
    });

    Promise.all(promises).then(() => {
      const dataTransfer = new DataTransfer();
      croppedFiles.forEach(file => {
        dataTransfer.items.add(file);
      });

      imageInput.files = dataTransfer.files;

      cropButton.style.display = 'none';
      cancelButton.style.display = 'none';
     productForm.submit();
    });
  });

  cancelButton.addEventListener('click', function () {
    imageInput.value = '';
    imagePreviewsContainer.innerHTML = '';
    cropButton.style.display = 'none';
    cancelButton.style.display = 'none';
    cropperInstances.forEach(instance => instance.cropper.destroy());
    cropperInstances = [];

    // Restore existing image previews
    existingImages.forEach(imagePath => {
      createImagePreview(imagePath, true);
    });
  });
});
</script>
<%- include('../layouts/footer.ejs') %>